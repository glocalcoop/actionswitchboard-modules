<?php

/** 
 * This module adds modal links to selected fields in settings.
 * 
 * You can manually add field modals with the structure:
 * <a class="ctools-use-modal ctools-modal-mfe-modal" 
 * href="/mfe-single-modal-callback/nojs/1/article/body+field_image">
 * 
 * or you can use the function mfe_make_link (in a php context)
 *
 * If you want multiple fields inside a modal you can add additional
 * fields to the modal url with "+field_name" at the end of the link.
 */

/**
 * Implements hook_init()
 */
function mfe_init() {
  // Add init functions here
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
 //Customize modal window
  drupal_add_js(array(
      'mfe-modal' => array(
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 700,
          'height' => 500,
          'contentRight' => 25,
          'contentBottom' => 45,
        ),
      ),
    ), 'setting');
}

/**
 * Implements hook_permission()
 */
function mfe_permission() {
  return array(
    'administer mfe settings' => array(
      'title' => t('Administer mfe settings'),
      'description' => t('Modify modal field edit settings.'),
    ),
    'access mfe links' => array(
      'title' => t('Access mfe links'),
      'description' => t('Give access to modal field editing per role.'),
    ),
  );
}

/**
 * Implements hook_admin()
 */
function mfe_admin() {
  $form = array();
  $form['mfe_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Entity Types for modal fields.'),
    '#default_value' => null !== variable_get('mfe_types') ? variable_get('mfe_types') : array(),
    '#options' => mfe_build_node_fields_list(),
    '#description' => t("Select which entities should have modal edit fields."),
    '#required' => FALSE,
  );
  $form['mfe_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use icons for links.'),
    '#default_value' => null !== variable_get('mfe_icon') ? variable_get('mfe_icon') : 0,
    '#description' => t("Check the box to include an icon for the modal link."),
    '#required' => FALSE,
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_menu()
 */
function mfe_menu() {
  $items = array();
  node_type_cache_reset();
  $items['admin/config/user-interface/mfe'] = array(
    'title' => 'Modal Field Edit',
    'description' => 'Choose types for modal field edit.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mfe_admin'),
    'access arguments' => array('administer mfe settings'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['mfe-single-modal-callback/%ctools_js/%/%'] = array(
    'page callback' => 'mfe_single_modal_callback',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access mfe links'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function mfe_make_link($link_text = '', $type, $field_name) {
  $multi_fields = '';
  if(is_array($field_name)) {
    foreach($field_name as $key => $value) {
      $multi_fields .= $value .'+';
    }
    $field_name = rtrim($multi_fields, '+');
  }
  // Set a default value if no text in supplied.
  if (empty($link_text)) {
    $link_text = 'Edit';
  }
  $icons = variable_get('mfe_icon');
  $mod_path = drupal_get_path('module', 'mfe');
  if($icons == 1) {
    $img_link = '<img src="/' .$mod_path .'/images/document-edit.png" alt="' .$link_text .'" />';
    return '<div id="' .$field_name .'-mfe-modal-style">' . l($img_link, 'mfe-single-modal-callback/nojs/' .arg(1) .'/' .$type .'/' .$field_name, array('html' => TRUE, 'attributes' => array('class' => 'ctools-use-modal ctools-modal-mfe-modal'))) . '</div>';
  }else{
  //   return '<div id="' .$field_name .'-mfe-modal-style">' . l($link_text, 'mfe-single-modal-callback/nojs/' .arg(1) .'/' .$type .'/' .$field_name, array('attributes' => array('class' => 'ctools-use-modal ctools-modal-mfe-modal'))) . '</div>';
  // }    
    $link_url = 'mfe-single-modal-callback/nojs/' .arg(1) .'/' .$type .'/' .$field_name;
    $link = l( '<span>'.$link_text.'</span>', $link_url, array(
      // need this to wrap the text-node in a span 
      'html' => TRUE,
      'attributes' => array( 
        'id' => $field_name .'-mfe-modal-style',
        'class' => 'icon edit ctools-use-modal ctools-modal-mfe-modal',
        'title' => $link_text
      )
    ));

    return $link;

  }    

}

/**
 *  Implements hook_page_alter()
 *
 *  Adds modal links to designated fields
 */
function mfe_page_alter(&$page) {
  // Load the modal library and add the modal javascript.
  $add_modals = mfe_approved_modal_node();
  if($add_modals === true) {
    if(user_access('access mfe links')) {
      if(isset($page['content']['system_main']['nodes'])) {
        $field_list = variable_get('mfe_types');
        foreach($field_list as $key => $value) {
          $field = array();
          $field_items = explode('_', $value);
          $type = $field_items[0];
          foreach($field_items as $k => $v) {
            if($k > 0) {
              $field[] = $v;
            }
          }
          if(!empty($field)) {
            $field = implode('_', $field);
            // dsm($field);
            // dsm($page['content']['system_main']['nodes']);
            foreach($page['content']['system_main']['nodes'] as $key => $value) {
              $node = node_load($key);
              global $user;
              $account = clone $user;
              if (node_access("update", $node, $account) === TRUE) {
                if(is_numeric($key) && isset($page['content']['system_main']['nodes'][$key][$field])) {
                  $fieldNameArray = preg_split('/_/', $field);
                  if( $fieldNameArray[0] == 'field' ) array_shift( $fieldNameArray );
                  if( $fieldNameArray[0] && $fieldNameArray[0] == 'image' ){
                    // this is very specific... but I don't want to bother people with changing the filed-name this far along.
                    $fieldNameArray[0] = "images";
                  }
                  $link_text = implode( " ", $fieldNameArray );
                  $page['content']['system_main']['nodes'][$key][$field]['#prefix'] = mfe_make_link( 'Edit ' . ucwords( $link_text ), $type, $field);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Tell us if the current node should have modal edits.
 * @returns 
 * 'true' if node is approved
 */
function mfe_approved_modal_node() {
  $settings = variable_get('mfe_types');
  $types = array();
  $add_modals = false;
  if(!empty($settings)) {
    foreach($settings as $key => $value) {
      $pos = strpos($value, '_type');
      if($pos !== false) {
        $type = explode('_', $value);
        $types[] = $type[0];
      }
    }
  }
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    foreach($types as $key => $value) {
      if($value != $node->type) {
        continue;
      }else{
        $add_modals = true;
      }
    }
  }
  return $add_modals;
}

/**
 * Implements hook_preprocess_node()
 *
 * Adds modal link for node titles.
 */
function mfe_preprocess_node(&$variables) {
  global $user;
  $field_list = variable_get('mfe_types');
  // TODO: This is a janky implementation, the link should appear above
  // the page title not below tabs.
  $title_val = $variables['type'] .'_title';
  // check if node type is selected for modals
  $add_modal = mfe_approved_modal_node();
  $account = clone $user;
  if($add_modal === true) {
    if(user_access('access mfe links') && node_access("update", $variables['node'], $account) === TRUE) {
      $types = variable_get('mfe_types');
      foreach($types as $key => $value) {
        if($value === $title_val) {
          $variables['title_prefix'] = mfe_make_link('Edit title', $variables['type'], 'title');
        }
      }
    }
  }
}

/**
 * modal callback for a single field
 */
function mfe_single_modal_callback($js = false, $nid, $type) {
  // If the user doesn't have javascript, redirect them to the normal node/*/edit page
  $js = true;
  if (!$js) {
    drupal_goto('node/' .$nid .'/edit');
  }else {
    // Javascript is on, prepare ctools modals.
    /* ctools_include('ajax'); */
    /* ctools_include('modal'); */

    global $user;

    // Add the node.pages.inc so that functions from the form can be used.
    module_load_include('inc', 'node', 'node.pages');
    
    $node = node_load($nid);
    node_object_prepare($node);

    // Prepare the form state, ctools reqruies ajax / title.  The node add form
    // requires node.
    $form_state = array(
      'ajax' => true,
      'title' => t('Edit ' .$type),
      'node' => $node,
    );

    // Do the ctools_modal_form_wrapping of the node form.  Returns a set of
    // ajax commands in output.
    $output = ctools_modal_form_wrapper( $type .'_node_form', $form_state);

    if (!empty($form_state['executed'])) {
      ctools_include('ajax');
      // Add the responder javascript, required by ctools
      ctools_add_js('ajax-responder');

      // Create ajax command array, dismiss the modal window.
      $output = array();
      $output[] = ctools_modal_command_dismiss();
      // Redirect to the node/nid in case path is changed by auto-aliasing.
      $output[] = ctools_ajax_command_redirect('node/' .$node->nid);

    }
    print ajax_render($output);

    exit;
  }
}

/**
 * modal callback for a multiple fields
 */
function mfe_multifield_modal_callback($js = false, $nid, $type) {
  // If the user doesn't have javascript, redirect them to the normal node/*/edit page
  $js = true;
  if (!$js) {
    drupal_goto('node/' .$nid .'/edit');
  }
  else {
    // Javascript is on, prepare ctools modals.
    /* ctools_include('ajax'); */
    /* ctools_include('modal'); */

    global $user;

    // Add the node.pages.inc so that functions from the form can be used.
    module_load_include('inc', 'node', 'node.pages');

    $node = node_load($nid);
    node_object_prepare($node);

    // Prepare the form state, ctools reqruies ajax / title.  The node add form
    // requires node.
    $form_state = array(
      'ajax' => true,
      'title' => t('Edit ' .$type),
      'node' => $node,
    );

    // Do the ctools_modal_form_wrapping of the node form.  Returns a set of
    // ajax commands in output.
    $output = ctools_modal_form_wrapper( $type .'_node_form', $form_state);

    if (!empty($form_state['executed'])) {
      ctools_include('ajax');
      // Add the responder javascript, required by ctools
      ctools_add_js('ajax-responder');

      // Create ajax command array, dismiss the modal window.
      $output = array();
      $output[] = ctools_modal_command_dismiss();
      $output[] = ctools_ajax_command_reload();

    }
    print ajax_render($output);

    exit;
  }
}

/**
 * Hide vertical tabs on node forms
 */
function _mfe_manage_vertical_tabs(&$form, &$form_state) {
  $path = drupal_get_path('module', 'mfe');
  drupal_add_css("$path/css/mfe.css");
  return $form;
}

/**
 * Implements hook_form_alter
 */
function mfe_form_alter(&$form, &$form_state, $form_id) {
  if(strpos($form_id, '_node_form') !== FALSE) {
    form_load_include($form_state, 'inc', 'node', 'node.pages');
    if(strpos($form['#action'], '/mfe-single-modal-callback') !== false) {
      $files = (isset($form_state['build_info']['files'])) ? $form_state['build_info']['files'] : array();
      $files[] = drupal_get_path('module', 'node') . '/node.pages.inc';
      $form_state['build_info']['files'] = $files;

      $field_refs = explode("/", $form['#action']);
      // dsm($field_refs);
      $fields = mfe_get_fields($form_state['node']->type);
      // hide($form['additional_settings']);
      // $path = drupal_get_path('module', 'mfe');
      if($field_refs[5] != 'title') {
        hide($form['title']);
      }
      // Here we handle multiple field references
      $field_refs[5] = urldecode($field_refs[5]);
      $multi_field = explode('+', $field_refs[5]);
      foreach($fields as $key => $value) {
        // First we set access = false on all fields
        $form[$value]['#access'] = FALSE;
        foreach($multi_field as $k => $field_name) {
            $form[$field_name]['#access'] = TRUE;
        }
        /* if($value == $field_refs[5]) { */
        /*   $form[$value]['#access'] = TRUE; */
        /* } */
      }
      $form['#after_build'][] = '_mfe_manage_vertical_tabs';
    }
  }
}

/**
 * Get field list of an entity bundle
 */
function mfe_get_fields($bundle) {
  $results = db_query('SELECT field_name FROM {field_config_instance} WHERE bundle = :bundle', array(':bundle' => $bundle))->fetchAll();
  if(!empty($results)) {
    foreach($results as $result) {
      $fields[] = $result->field_name ;
    }
  }
  if(isset($fields)) {
    return $fields;
  }
}

/**
 * Build a list of node fields for admin page
 */
function mfe_build_node_fields_list() {
  $tf_tree = array();
  $types = node_type_get_names();
  foreach($types as $key => $value) {
    $fields = mfe_get_fields($key);
    $tf_tree[$key .'_type'] = $value .' type';
    $tf_tree[$key .'_title'] = '-- ' .$value .'_title';
    if(isset($fields)) {
      foreach($fields as $k => $v) {
        $tf_tree[$key .'_' .$v] = '-- ' .$key .'_' .$v;
      }
    }
  }
  return $tf_tree;
}
