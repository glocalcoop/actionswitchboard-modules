<?php
/** 
 * Implements hook_form_alter()
 */
function asb_issues_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'scheme_node_form' || $form_id == 'goal_node_form') {
    // Here we create an ajax callback that will limit
    // the taxonomy term selections available based
    // on which entity is selected in field_issues_goals
    $form['field_issues_goals']['und']['#ajax'] = array(
      'event' => 'click',
      'wrapper' => 'parent-goal-wrapper',
      'callback' => 'asb_issues_goals_ajax_callback',
      'method' => 'replace',
    );
    if($form_id == 'scheme_node_form') {
      $form['field_issues_goals']['#suffix'] = '<div class="goal-rec"><a href="/node/add/goal" target="_blank">Recommend Your Own Goal</a></div>';
    }
    // Add a wrapper for the correct field to change
    $form['field_scheme_goals_taxonomy']['und']['#prefix'] = '<div id="parent-goal-wrapper">';
    $form['field_scheme_goals_taxonomy']['und']['#suffix'] = '</div>';
    drupal_add_js(drupal_get_path('module', 'asb_issues') . '/js/issues.js', 'file');
  }
  if($form_id == 'issue_node_form') {
    $form['field_goals_taxonomy']['und']['#options'] = asb_issues_get_top_goals();
  }
}

/**
 * Returns just top level goals to be applied
 * to selecting issues.
 */
function asb_issues_get_top_goals($vid = 5) {
  $terms = taxonomy_get_tree($vid, 0, 1);
  $options = array();
  foreach($terms as $key => $term) {
    $options[$term->tid] = $term->name;
  }
  return $options;
}
/**
 * Implements hook_views_post_execute
 */
function asb_issues_views_post_execute(&$view) {
  if($view->name == 'goal_tree' && 'block' == $view->current_display) {
    if(isset($view->result[0]->_field_data['nid']['entity']->field_all_goals['und'])) {
      $goals = $view->result[0]->_field_data['nid']['entity']->field_all_goals['und'];
      $sorted_goals = asb_issues_order_goals($goals);
      $view->sorted_goals = $sorted_goals;
    }
  }
}

/**
 * Implements hook_views_pre_render
 */
function asb_issues_views_pre_render(&$view) {
  if($view->name == 'goal_tree' && 'block' == $view->current_display) {
    if(isset($view->sorted_goals)) {
      $mgoals = "<!-- Added in asb_issues.module -->";
      $sgoals = "";
      foreach($view->sorted_goals as $key => $value) {
        if(count($value) > 0) {
          $path = drupal_lookup_path('alias','node/'.$key);
          $node = node_load($key);
          $mgoals .= '<li class="first-goal nid-'.$node->nid.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
          foreach($value as $k => $v) {
            if(count($v) == 0) {
              $path = drupal_lookup_path('alias','node/'.$k);
              $node = node_load($k);
              $mgoals .= '<li class="sub-goal nid-'.$node->nid.' parent-'.$key.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
            }else{
              $path = drupal_lookup_path('alias','node/'.$k);
              $node = node_load($k);
              $mgoals .= '<li class="sub-goal nid-'.$node->nid.' parent-'.$key.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
              foreach($v as $kv => $vv) {
                $path = drupal_lookup_path('alias','node/'.$kv);
                $node = node_load($kv);
                $mgoals .= '<li class="sub-goal sub-sub-goal nid-'.$node->nid.' parent-'.$k.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
              }
            }
          }
        }else{
          $path = drupal_lookup_path('alias','node/'.$key);
          $node = node_load($key);
          $sgoals .= '<li class="first-goal"><a href="/'.$path .'">'.$node->title.'</a></li>';
        }
      }
      $output = '<ul class="goal-tree">'.$mgoals.$sgoals.'</ul>';
      $view->result[0]->field_field_all_goals[0]['rendered'] = $output;
    }
  }
}

/** 
 *
 * Add ajax callback for parent goals truncation.
 * The callback changes the parent goal list so that
 * only goals that are connected to the issue appear
 * to the user.
 */
function asb_issues_goals_ajax_callback(&$form, &$form_state) {
  $allowed_goals = asb_issues_get_allowed_terms($form['field_issues_goals']['und']['#value']);
  // Build the full list of options
  $field_goals = asb_issues_taxonomy_options('goals');
  // dsm($field_goals);
  foreach($field_goals as $key => $value) {
    if($key != '_none' && !in_array($key, $allowed_goals)) {
      unset($field_goals[$key]);
      unset($form['field_scheme_goals_taxonomy']['und']['#options'][$key]);
    }
  }
  // $form['field_scheme_goals_taxonomy']['und']['#options'] = $form['field_scheme_goals_taxonomy']['und']['#options'];
  if(isset($form['field_scheme_goals_taxonomy']['und']['#options'])) {
    $form['field_scheme_goals_taxonomy']['und']['#options'] += $field_goals;
    return $form['field_scheme_goals_taxonomy'];
  }
}


/**
 * Returns a hierarchically themed array of taxonomy
 * terms for use in goal and scheme goal taxonomy fields.
 **/
function asb_issues_taxonomy_options($machine_name) {
  $vocab = taxonomy_vocabulary_machine_name_load($machine_name);
  $tree = taxonomy_get_tree($vocab->vid);
  foreach ($tree as $item) {
    $options[$item->tid] = str_repeat('-', $item->depth) . $item->name;
  }
  return $options;
}

/**
 * Get allowed goal taxonomy terms for a specific nid
 */
function asb_issues_get_allowed_terms($nid) {
  $value = $nid;
  $node = node_load($value);
  $field_ref_type = field_info_instances('node',$node->type);
  foreach($field_ref_type as $field_name => $field_value) {
    if($field_value['widget']['type'] == 'taxonomy_shs') {
      $field = field_get_items('node', $node, $field_name);
    }elseif($field_value['widget']['type'] == 'options_select') {
      $field_select = field_get_items('node', $node, $field_name);
    }
  }
  // Create a list of all terms from top parent to
  // third child
  // TODO: Figure a way to walk through all children
  // no matter the depth
  $top_parents = array();
  if(!empty($field_select)) {
    $all_terms = array();
    foreach($field_select as $key => $term) {
      $top_parent_term = null;
      $children_terms = taxonomy_get_children($term['tid']);
      $all_terms[] = $term['tid'];
      foreach($children_terms as $k => $child) {
        $child_children_terms = taxonomy_get_children($child->tid);
          if(!in_array($child->tid, $all_terms)) {
            $all_terms[] = $child->tid;
          }
        foreach($child_children_terms as $ke => $ch) {
          if(!in_array($ch->tid, $all_terms)) {
            $all_terms[] = $ch->tid;
          }
        }
      }
    }
  }else{
    $all_terms = array();
  }
  // Get list of terms from the lowest term to the top parent
  // This is legacy behavior based on our first implementation
  // it exists to ensure continued functionality for any issues
  // that might be using the earlier functionality.
  if(!empty($field)) {
    $all_terms = array();
    foreach($field as $key => $term) {
      $top_parent_term = null;
      $parent_terms = taxonomy_get_parents_all($term['tid']);
      foreach($parent_terms as $parent) {
        $parent_parents = taxonomy_get_parents_all($parent->tid);
        $all_terms[] = $parent->tid;
        if(count($parent_parents) == 1) {
          $top_parents[] = $parent->tid;
        }
      }
    }
  }elseif(!isset($all_terms)) {
    $all_terms = array();
  }
  return $all_terms;
}

/**
 * Put goals in a one level hierarchy.
 */
function asb_issues_order_goals($goals) {
  $sorted = array();
  $nsorted = array();
  foreach($goals as $key => $value) {
    $node = node_load($value['target_id']);
    if (count($node->field_child_goals) > 0) {
      $nsorted[$value['target_id']] = array();
      foreach($node->field_child_goals['und'] as $k => $target) {
        $nsorted[$value['target_id']][$target['target_id']] = array();
      }
    }
    $result = db_query("SELECT field_parent_goal_target_id as parent FROM field_data_field_parent_goal
              WHERE entity_id = :nid", array(':nid' => $value['target_id']));
    $parent = $result->fetchField(0);
    // dsm($parent);
    if(!empty($parent)) {
      if(key_exists($value['target_id'],$sorted)) {
        $sorted[$parent][] = array($value['target_id']);
      }else{
        $sorted[$parent][] = array($value['target_id']);
      }
    }else{
      if(!key_exists($value['target_id'],$sorted)) {
        $sorted[$value['target_id']] = array();
      }
    }
  }
  foreach($sorted as $key => $value) {
    if(count($sorted[$key]) > 0) {
      unset($sorted[$key]);
    }
  }
  foreach($nsorted as $key => $value) {
    foreach($nsorted as $k => $v) {
      // dsm(array_search($key,$v));
      if(key_exists($key, $v)) {
        $nsorted[$k][$key] = $nsorted[$key];
        unset($nsorted[$key]);
      }
      $search = array_search($key,$v);
      if($search != false) {
        $nsorted[$k][$search] = array($key => $value);
        unset($nsorted[$key]);
        // dsm($nsorted);

      }
    }
  }
  foreach($nsorted as $key => $value) {
    $sorted[$key] = $value;
  }
  return $sorted;
}

/**
 * Implements hook_action_info()
 *
 * Including rules here because for some reason
 * rules was not picking up the rules.inc file
 *
 */
function asb_issues_action_info() {
  return array(
    'asb_issues_save_goal_action' => array(
      'type' => 'node',
      'label' => t('Save goal term and link to issue on goal approval'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Saves goal (node title) as a taxonomy term
 */
function asb_issues_save_goal_action($node, $context) {
  $vid = 5;
  $parent = NULL;
  if(isset($node->field_scheme_goals_taxonomy['und'][0]['tid'])) {
    $parent = $node->field_scheme_goals_taxonomy['und'][0]['tid'];
  }
  // Create the term object
  $term = new stdClass();
  $term->vid = $vid;
  $term->name = $node->title;
  $term->description = $node->body['und'][0]['value'];
  $term->parent = $parent;
  $tree = taxonomy_get_tree(5);
  $in_tree = FALSE;
  foreach($tree as $value) {
    if($value->name != $term->name) {
      continue;
    }else{
      $in_tree = TRUE;
    }
  }
  if($in_tree == FALSE) {
    taxonomy_term_save($term);
    drupal_set_message('Goal, ' .$term->name .', saved as taxonomy term.');
    watchdog('action', 'Saved new goal, %goal, as taxonomy term.', array('%goal' => $term->name));
    if(!empty($term) && !isset($node->field_scheme_goals_taxonomy['und'][0]['tid'])) {
      $issue = node_load($node->field_issues_goals['und'][0]['target_id']);
      $issue->field_goals_taxonomy[$issue->language][]['tid'] = $term->tid;
      // dsm($issue);
      try {
        node_save($issue);
        $success = TRUE;
        drupal_set_message('Goal, '.$node->title .', linked to issue, ' .$issue->title);
        watchdog('action', 'Linked new goal, %goal, to issue, %issue.', array('%goal' => $term->name, '%issue' => $issue->title));
      }
      catch (Exception $e) {
        drupal_set_message('Failed to link Goal, '.$node->title .', to issue, ' .$issue->title);
        watchdog('action', 'Failed to link new goal, %goal, to issue, %issue.', array('%goal' => $term->name, '%issue' => $issue->title), WATCHDOG_ERROR);
      }
    }else{
      drupal_set_message("No term found for linking to issue");
    }
  }else{
    drupal_set_message('Taxonomy term ' .$term->name .' already exists', 'warning');
    watchdog('action', 'Failed to save new goal, %goal, as taxonomy term.', array('%goal' => $term->name));
  }
}

/**
 * Returns all goals for a given argument.
 */
function asb_issues_get_all_goals($vid, $tids = array()) {
  // Terms from previous and next pages are shown if the term tree would have
  // been cut in the middle. Keep track of how many extra terms we show on each
  // page of terms.
  $back_step    = NULL;
  // An array of the terms to be displayed on this page.
  $new_terms = array();
  $delta = 0;
  $term_deltas = array();
  $tree = taxonomy_get_tree(5);
  $term = current($tree);
  do {
    if(empty($term)) {
      break;
    }
    $delta++;
    if(isset($term->depth) && ($term->depth > 0) && !isset($back_step)) {
      $back_step = 0;
      while($pterm = prev($tree)) {
        $back_step++;
        if($pterm->depth == 0) {
          prev($tree);
          continue 2;
        }
      }
    }
    $new_terms[$term->tid] = $term;
  }while ($term = next($tree));
  // print_r($current_page);

  $terms = array();
  // Build the actual form.
  $parsed_terms = array();
  foreach($tids as $k => $value) {
    $parsed_terms[$value] = $new_terms[$value];
    $newtree = taxonomy_get_tree(5, $value, NULL);
    foreach($newtree as $ka => $va) {
      $parsed_terms[$va->tid] = $new_terms[$va->tid];
    }
  }
  $current_terms = $parsed_terms;
  foreach ($current_terms as $key => $term) {
    // Save the term for the current page so we don't have to load it a second time.
    $terms[$key]['#term'] = (array) $term;
    if (isset($term->parents)) {
      $terms[$key]['#term']['parent'] = $term->parent = $term->parents[0];
      unset($terms[$key]['#term']['parents'], $term->parents);
    }
    $terms[$key]['#term'] += array('#type' => 'link', '#title' => $term->name, '#href' => "taxonomy/term/$term->tid");
  }
  return $terms;
}

/**
 * Create goal tree markup.
 */
function asb_issues_theme_goals($terms) {
  $output = '<ul class="goal-tax">' ."\n";
  foreach($terms as $key => $term) {
    if($key != '#parent_fields') {
      $link = l(t($term['#term']['#title']), $term['#term']['#href'], array('attributes' => array('class' => array('goal-link'))));
      $output .= '<li class="goal depth-' .$term['#term']['depth'] .' tid-' .$term['#term']['tid'] .'">' .$link ."</li>\n";
    }
  }
  $output .= "</ul>\n";
  return $output;
}

function asb_issues_build_goals() {
  $output = '';
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    $tids = array();
    if($node->type == 'issue' && isset($node->field_goals_taxonomy['und'])) {
      foreach($node->field_goals_taxonomy['und'] as $key => $value) {
        $tids[] = $value['tid'];
      }
    }
    $goals = asb_issues_get_all_goals(5,$tids);
    $output = asb_issues_theme_goals($goals);
  }elseif(arg(0) == 'taxonomy' && is_numeric(arg(2))) {
    $parents = taxonomy_get_parents_all(arg(2));
    $tid = end($parents);
    $goals = asb_issues_get_all_goals(5,array($tid->tid));
    $output = asb_issues_theme_goals($goals);
  }
  return $output;
}

/**
 * Implements hook_block_info().
 *
 * Add a goals hierarchy tree block.
 */
function asb_issues_block_info() {
  $blocks['goals_tree'] = array(
    'info' => t('Goals Tree'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Add a custom group statistics and create content blocks.
 */
function asb_issues_block_view($delta = '') {
  global $user;
  $block = array();
  
  switch ($delta) {
    case 'goals_tree':
      $block['subject'] = t('Associated Goals');
      $block['content'] = asb_issues_build_goals();
      break;
  }
  return $block;
}
