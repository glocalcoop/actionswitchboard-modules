<?php

function asb_issues_cron() {
  // TODO: Make these crons limited to once a day
  // Create tags to issues
  asb_issues_sync_civi_interests();
  // Sync user tags to interests
  asb_issues_sync_civi_tags();
}

/** 
 * Implements hook_form_alter()
 */
function asb_issues_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'scheme_node_form' || $form_id == 'goal_node_form') {
    // Here we create an ajax callback that will limit
    // the taxonomy term selections available based
    // on which entity is selected in field_issues_goals
    $form['field_issues_goals']['und']['#ajax'] = array(
      'event' => 'click',
      'wrapper' => 'parent-goal-wrapper',
      'callback' => 'asb_issues_goals_ajax_callback',
      'method' => 'replace',
    );
    // Add a recommend a goal link on scheme_node_form
    /* if($form_id == 'scheme_node_form') { */
    /*   $form['field_issues_goals']['#suffix'] = '<div class="goal-rec"><a class="ui-button" href="/node/add/goal" target="_blank">Recommend Your Own Goal</a></div>'; */
    /* } */
    // Add a wrapper for the correct field to change
    $form['field_scheme_goals_taxonomy']['und']['#prefix'] = '<div id="parent-goal-wrapper">';
    $form['field_scheme_goals_taxonomy']['und']['#suffix'] = '</div>';
    drupal_add_js(drupal_get_path('module', 'asb_issues') . '/js/issues.js', 'file');
  }
  if($form_id == 'issue_node_form') {
    $form['field_goals_taxonomy']['und']['#options'] = asb_issues_get_top_goals();
  }
  // We tweak the add goal form a little for UX
  if($form_id == 'goal_node_form') {
    drupal_add_js(drupal_get_path('module', 'asb_issues') . '/js/goal.js', 'file');
    if($form['nid']['#value'] == NULL) {
      drupal_set_title("Recommend a goal");
      $form['actions']['submit']['#value'] = "Submit";
      $form['actions']['preview']['#access'] = FALSE;
      $form['actions']['submit']['#submit'][] = 'asb_issues_goal_submit';
    }
  }
}

/**
 * Implements submit handler for goal creation.
 * This function simply adds a drupal message after submit.
 */
function asb_issues_goal_submit($form, &$form_state) {
  // Here we get the current status messages
  $messages = drupal_get_messages('status');
  // Then we set our own status message, instead.
  drupal_set_message(t("Thank you for submitting a new goal to the Action Switchboard. We will review it and get back to you soon."));
}

/**
 * Returns just top level goals to be applied
 * to selecting issues.
 */
function asb_issues_get_top_goals($vid = 5) {
  $terms = taxonomy_get_tree($vid, 0, 1);
  $options = array();
  foreach($terms as $key => $term) {
    $options[$term->tid] = $term->name;
  }
  return $options;
}

/** 
 *
 * Add ajax callback for parent goals truncation.
 * The callback changes the parent goal list so that
 * only goals that are connected to the issue appear
 * to the user.
 */
function asb_issues_goals_ajax_callback(&$form, &$form_state) {
  $allowed_goals = asb_issues_get_allowed_terms($form['field_issues_goals']['und']['#value']);
  // Build the full list of options
  $field_goals = asb_issues_taxonomy_options('goals');
  // dsm($field_goals);
  foreach($field_goals as $key => $value) {
    if($key != '_none' && !in_array($key, $allowed_goals)) {
      unset($field_goals[$key]);
      unset($form['field_scheme_goals_taxonomy']['und']['#options'][$key]);
    }
  }
  // $form['field_scheme_goals_taxonomy']['und']['#options'] = $form['field_scheme_goals_taxonomy']['und']['#options'];
  if(isset($form['field_scheme_goals_taxonomy']['und']['#options'])) {
    $form['field_scheme_goals_taxonomy']['und']['#options'] += $field_goals;
    return $form['field_scheme_goals_taxonomy'];
  }
}


/**
 * Returns a hierarchically themed array of taxonomy
 * terms for use in goal and scheme goal taxonomy fields.
 **/
function asb_issues_taxonomy_options($machine_name) {
  $vocab = taxonomy_vocabulary_machine_name_load($machine_name);
  $tree = taxonomy_get_tree($vocab->vid);
  foreach ($tree as $item) {
    $options[$item->tid] = str_repeat('-', $item->depth) . $item->name;
  }
  return $options;
}

/**
 * Get allowed goal taxonomy terms for a specific nid
 */
function asb_issues_get_allowed_terms($nid) {
  $value = $nid;
  $node = node_load($value);
  $field_ref_type = field_info_instances('node',$node->type);

  // We try to make this work for both simple hierarchical select
  // and regular option select since we've used both methods for
  // handling taxonomies.  Ultimately we should just be using
  // option_select.
  foreach($field_ref_type as $field_name => $field_value) {
    if($field_value['widget']['type'] == 'taxonomy_shs') {
      $field = field_get_items('node', $node, $field_name);
    }elseif($field_value['widget']['type'] == 'options_select') {
      $field_select = field_get_items('node', $node, $field_name);
    }
  }
  // Create a list of all terms from top parent to
  // third child
  // TODO: Figure a way to walk through all children
  // no matter the depth
  $top_parents = array();
  if(!empty($field_select)) {
    $all_terms = array();
    foreach($field_select as $key => $term) {
      $top_parent_term = null;
      $children_terms = taxonomy_get_children($term['tid']);
      $all_terms[] = $term['tid'];
      foreach($children_terms as $k => $child) {
        $child_children_terms = taxonomy_get_children($child->tid);
          if(!in_array($child->tid, $all_terms)) {
            $all_terms[] = $child->tid;
          }
        foreach($child_children_terms as $ke => $ch) {
          if(!in_array($ch->tid, $all_terms)) {
            $all_terms[] = $ch->tid;
          }
        }
      }
    }
  }else{
    $all_terms = array();
  }
  // Get list of terms from the lowest term to the top parent
  // This is legacy behavior based on our first implementation
  // it exists to ensure continued functionality for any issues
  // that might be using the earlier functionality.
  if(!empty($field)) {
    $all_terms = array();
    foreach($field as $key => $term) {
      $top_parent_term = null;
      $parent_terms = taxonomy_get_parents_all($term['tid']);
      foreach($parent_terms as $parent) {
        $parent_parents = taxonomy_get_parents_all($parent->tid);
        $all_terms[] = $parent->tid;
        if(count($parent_parents) == 1) {
          $top_parents[] = $parent->tid;
        }
      }
    }
  }elseif(!isset($all_terms)) {
    $all_terms = array();
  }
  return $all_terms;
}

/**
 * Implements hook_action_info()
 *
 * Including rules here because for some reason
 * rules was not picking up the rules.inc file
 *
 */
function asb_issues_action_info() {
  return array(
    'asb_issues_save_goal_action' => array(
      'type' => 'node',
      'label' => t('Save goal term and link to issue on goal approval'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Saves goal (node title) as a taxonomy term
 */
function asb_issues_save_goal_action($node, $context) {
  $vid = 5;
  $parent = NULL;
  if(isset($node->field_scheme_goals_taxonomy['und'][0]['tid'])) {
    $parent = $node->field_scheme_goals_taxonomy['und'][0]['tid'];
  }
  // Create the term object
  $term = new stdClass();
  $term->vid = $vid;
  $term->name = $node->title;
  $term->description = $node->body['und'][0]['value'];
  $term->parent = $parent;
  $tree = taxonomy_get_tree(5);
  $in_tree = FALSE;
  foreach($tree as $value) {
    if($value->name != $term->name) {
      continue;
    }else{
      $in_tree = TRUE;
    }
  }
  if($in_tree == FALSE) {
    taxonomy_term_save($term);
    drupal_set_message('Goal, ' .$term->name .', saved as taxonomy term.');
    watchdog('action', 'Saved new goal, %goal, as taxonomy term.', array('%goal' => $term->name));
    if(!empty($term) && !isset($node->field_scheme_goals_taxonomy['und'][0]['tid'])) {
      $issue = node_load($node->field_issues_goals['und'][0]['target_id']);
      $issue->field_goals_taxonomy[$issue->language][]['tid'] = $term->tid;
      // dsm($issue);
      try {
        node_save($issue);
        $success = TRUE;
        drupal_set_message('Goal, '.$node->title .', linked to issue, ' .$issue->title);
        watchdog('action', 'Linked new goal, %goal, to issue, %issue.', array('%goal' => $term->name, '%issue' => $issue->title));
      }
      catch (Exception $e) {
        drupal_set_message('Failed to link Goal, '.$node->title .', to issue, ' .$issue->title);
        watchdog('action', 'Failed to link new goal, %goal, to issue, %issue.', array('%goal' => $term->name, '%issue' => $issue->title), WATCHDOG_ERROR);
      }
    }else{
      drupal_set_message("No term found for linking to issue");
    }
  }else{
    drupal_set_message('Taxonomy term ' .$term->name .' already exists', 'warning');
    watchdog('action', 'Failed to save new goal, %goal, as taxonomy term.', array('%goal' => $term->name));
  }
}

/**
 * Returns all goals for a given argument.
 */
function asb_issues_get_all_goals($vid, $tids = array()) {
  // This function shows all related goals based on the provided arguments.
  // We've taken most of this functionality from the taxonomy module.
  $back_step    = NULL;
  // An array of the terms to be displayed on this page.
  $new_terms = array();
  $delta = 0;
  $term_deltas = array();
  $tree = taxonomy_get_tree(5);
  $term = current($tree);
  do {
    if(empty($term)) {
      break;
    }
    $delta++;
    if(isset($term->depth) && ($term->depth > 0) && !isset($back_step)) {
      $back_step = 0;
      while($pterm = prev($tree)) {
        $back_step++;
        if($pterm->depth == 0) {
          prev($tree);
          continue 2;
        }
      }
    }
    $new_terms[$term->tid] = $term;
  }while ($term = next($tree));
  // print_r($current_page);
  $terms = array();
  // Build the actual form.
  $parsed_terms = array();
  foreach($tids as $k => $value) {
    if(!isset($parsed_terms[$value])) {
      $parsed_terms[$value] = $new_terms[$value];
    }
    $newtree = taxonomy_get_tree(5, $value, NULL);
    $newtree[] = taxonomy_term_load($value);
    foreach($newtree as $ka => $va) {
      // $parsed_terms[$va->tid] = $new_terms[$va->tid];
      if(!isset($parsed_terms[$va->tid])) {
        $parsed_terms[$va->tid] = $va;
      }else{
        $parsed_terms[$va->tid] = $va;
      }
      if(isset($parsed_terms[arg(2)])) {
        unset($parsed_terms[arg(2)]);
      }
    }
  }
  $current_terms = $parsed_terms;
  foreach ($current_terms as $key => $term) {
    // Save the term for the current page so we don't have to load it a second time.
    $terms[$key]['#term'] = (array) $term;
    if (isset($term->parents)) {
      $terms[$key]['#term']['parent'] = $term->parent = $term->parents[0];
      unset($terms[$key]['#term']['parents'], $term->parents);
    }
    $terms[$key]['#term'] += array('#type' => 'link', '#title' => $term->name, '#href' => "taxonomy/term/$term->tid");
  }
  return $terms;
}

/**
 * Create goal tree markup.
 * Adding depth classes for hierarchical display.
 */
function asb_issues_theme_goals($terms) {
  $output = '<ul class="goal-tax">' ."\n";
  foreach($terms as $key => $term) {
    if($key != '#parent_fields') {
      $link = l(t($term['#term']['#title']), $term['#term']['#href'], array('attributes' => array('class' => array('goal-link'))));
      !isset($term['#term']['parent']) ? $depth = 0 : $depth = $term['#term']['depth'] + 1;
      // $output .= '<li class="goal depth-' .$term['#term']['depth'] .' tid-' .$term['#term']['tid'] .'">' .$link ."</li>\n";
      if(!empty($term['#term']['name'])) {
        $output .= '<li class="goal depth-' .$depth .' tid-' .$term['#term']['tid'] .'">' .$link ."</li>\n";
      }
    }
  }
  $output .= "</ul>\n";
  return $output;
}

function asb_issues_build_goals() {
  $output = '';
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    $tids = array();
    if($node->type == 'issue' && isset($node->field_goals_taxonomy['und'])) {
      foreach($node->field_goals_taxonomy['und'] as $key => $value) {
        $tids[] = $value['tid'];
      }
    }
    $goals = asb_issues_get_all_goals(5,$tids);
    $output = asb_issues_theme_goals($goals);
  }elseif(arg(0) == 'taxonomy' && is_numeric(arg(2))) {
    $parents = taxonomy_get_parents_all(arg(2));
    $tid = end($parents);
    $result = db_query("SELECT entity_id 
                         FROM field_data_field_goals_taxonomy 
                           WHERE bundle = 'issue' 
                             AND field_goals_taxonomy_tid = :tid", array(':tid' => $tid->tid));
    $record = $result->fetchAll();
    if(isset($record[0])) {
      $issue = node_load($record[0]->entity_id);
      $output .= '<h3 class="issue-title">Issue: <a class="issue-link" href="/node/'.$issue->nid .'">' .$issue->title .'</a></h3>';
      $output .= '<h2 class="block-title">Associated Goals</h2>';
    }
             
    $goals = asb_issues_get_all_goals(5,array($tid->tid));
    $output .= asb_issues_theme_goals($goals);
  }
  return $output;
}

/**
 * Implements hook_block_info().
 *
 * Add a goals hierarchy tree block.
 */
function asb_issues_block_info() {
  $blocks['goals_tree'] = array(
    'info' => t('Goals Tree'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Add a custom group statistics and create content blocks.
 */
function asb_issues_block_view($delta = '') {
  global $user;
  $block = array();
  
  switch ($delta) {
    case 'goals_tree':
      $block['subject'] = arg(0) == 'node' ? t('Associated Goals') : '';
      $block['content'] = asb_issues_build_goals();
      break;
  }
  return $block;
}

/**
 * Get issue titles
 */
function asb_issues_get_issue_titles() {
  //This function will do something like
  $sql = "SELECT DISTINCT title FROM {node} WHERE type = 'issue'";
  $result = db_query($sql)->fetchAll();
  return $result;
}

/**
 * Compare issue titles with civicrm tags
 */
function asb_issues_compare_civi_tags($titles) {
  // Determine if the issue tag exists, if not, create it
  $parent = asb_issues_civi_parent_tag();
  foreach($titles as $key => $title) {
    $params = array(
      'version' => 3,
      'sequential' => 1,
      'name' => trim($title->title),
    );
    $civi_tag = asb_scheme_civicrm_api('tag', 0, NULL, $params = $params);
    if(isset($civi_tag['values'][0]['name'])) {
      continue;
    }else{
      // Create the tag trimming to avoid extra white space.
      asb_issues_create_tag(trim($title->title), $parent);
    }
  }
}

/** 
 * Get the parent tag id
 */
function asb_issues_civi_parent_tag() {
  $tag = '';
  // This tag should always be named Interests
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name' => 'Interests',
    );
  $civi_tag = asb_scheme_civicrm_api('tag', 0, NULL, $params = $params);
  if(isset($civi_tag['values'][0]['name'])) {
    return $civi_tag['id'];
  }else{
    asb_issues_create_tag($title);
    $tag = asb_scheme_civicrm_api('tag', 0, NULL, $params = $params);
    return $tag['id'];
  }
}

/**
 * Create a civicrm tag
 */
function asb_issues_create_tag($title, $parent = NULL) {
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name' => $title,
    'description' => empty($parent) ? 'Issues\/Interests selected in the user profile' : '',
    'parent_id' => $parent,
    'is_selectable' => 1,
    'is_reserved' => 1,
  );
  $create_tag = asb_scheme_civicrm_api('tag_create', 0, NULL, $params);
}

/**
 * Main function for syncing issues with tags.
 * Should not change often.
 */
 
function asb_issues_sync_civi_interests() {
  $titles = asb_issues_get_issue_titles();
  asb_issues_compare_civi_tags($titles);
}

/**
 * Build and execute a query to pull in all of the
 * listed interests for all users.
 */
function asb_issues_get_users_interests() {
  $user_interests = array();
  $sql = "SELECT {users}.uid uid, {field_data_field_issue_reference}.field_issue_reference_target_id nid, 
         {node}.title 
           FROM {users} 
             LEFT JOIN {field_data_field_issue_reference} 
             ON entity_id = uid 
               LEFT JOIN {node} on {node}.nid = {field_issue_reference_target_id} 
               WHERE {field_issue_reference_target_id} 
                 IS NOT NULL AND {field_data_field_issue_reference}.entity_type = 'user' 
                 ORDER BY uid";
  $result = db_query($sql)->fetchAll();
  foreach($result as $key => $value) {
    if(!isset($user_interests[$value->uid])) {
      $user_interests[$value->uid] = array(
        'titles' => array( 
          trim($value->title),
        )
      );
    }else{
      $user_interests[$value->uid]['titles'][] = trim($value->title);
    }
  }
  return $user_interests;
}

/**
 * Run the necessary functions to sync tags
 * with the correct user
 */
function asb_issues_sync_civi_tags() {
  $user_interests = asb_issues_get_users_interests();
  foreach($user_interests as $uid => $value) {
    $contact = asb_scheme_civicrm_api('contact', $uid, NULL);
    asb_issues_add_civi_issue_tags($contact, $user_interests[$uid]);
  }
}

/**
 * Parse all the tags and add or removed them.
 */
function asb_issues_add_civi_issue_tags($contact, $user_interests) {
  // Get a list of all our relevant tags.
  $issue_tags = asb_issues_get_all_issue_tags();
  $tags = explode( ',', $contact['values'][0]['tags']);
  // Remove the Intersts tag, b/c we never want to touch it.
  $tags = array_diff($tags, array("Interests"));
  // Establish primary parameters for civi
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'contact_id' => isset($contact['id']) ? $contact['id'] : '',
    'tag_id' => '',
  );
  $delete_tags = array();
  $create_tags = array();
  // If tags already exist we need to compare them to the selected 
  // user interests and make sure they're still the same.
  if(count($tags) > 1) {
    if(isset($user_interests['titles'])) {
      // Create arrays of tags to be added to the civi contact
      // and those to be deleted
      $delete_tags = array_diff($tags, $user_interests['titles']);
      $create_tags = array_diff($user_interests['titles'],$tags);
    }
    // otherwise we just add all the interests as tags.
  }elseif(isset($user_interests['titles'])) {
    $create_tags = $user_interests['titles'];
  }
  // print_r($create_tags);
  // Loop through tags to add or remove and then do so.
  foreach($create_tags as $key => $value) {
    // just in case we trim whitespace
    $value = trim($value);
    $params['tag_id'] = $issue_tags[$value];
    $result = asb_scheme_civicrm_api('tag_add', 0, NULL, $params);
    // print_r($result);
    if($result['is_error'] == 1) {
      watchdog('error', 'Something went wrong with tag/issue syncing on civicrm.');
    }
  }
  foreach($delete_tags as $key =>$value) {
    $value = trim($value);
    $params['tag_id'] = $issue_tags[$value];
    $result = asb_scheme_civicrm_api('tag_remove', 0, NULL, $params);
    if($result['is_error'] == 1) {
      watchdog('error', 'Something went wrong with tag/issue syncing to civicrm.');
    }
  }
}

/**
 * Get the full list of issue tags
 */
function asb_issues_get_all_issue_tags() {
  $parent = asb_issues_civi_parent_tag();
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'parent_id' => $parent,
  );
  $civi_tag = asb_scheme_civicrm_api('tag', 0, NULL, $params = $params);
  $civi_tags = array();
  foreach($civi_tag['values'] as $key => $value) {
    $civi_tags[$value['name']] = $value['id'];
  }
  return $civi_tags;
}
