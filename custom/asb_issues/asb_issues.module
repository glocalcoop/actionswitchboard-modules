<?php
/** 
 * Implements hook_form_alter()
 */
function asb_issues_form_alter(&$form, &$form_state, $form_id) {
    if($form_id == 'scheme_node_form' || $form_id == 'goal_node_form') {
    // Here we create an ajax callback that will limit
    // the taxonomy term selections available based
    // on which entity is selected in field_issues_goals
    $form['field_issues_goals']['und']['#ajax'] = array(
      'event' => 'click',
      'wrapper' => 'parent-goal-wrapper',
      'callback' => 'asb_scheme_goals_ajax_callback',
      'method' => 'replace',
    );
    if($form_id == 'scheme_node_form') {
      $form['field_issues_goals']['#suffix'] = '<div class="goal-rec"><a href="/node/add/goal" target="_blank">Recommend Your Own Goal</a></div>';
    }
    // Add a wrapper for the correct field to change
    $form['field_scheme_goals_taxonomy']['und']['#prefix'] = '<div id="parent-goal-wrapper">';
    $form['field_scheme_goals_taxonomy']['und']['#suffix'] = '</div>';
    drupal_add_js(drupal_get_path('module', 'asb_issues') . '/js/issues.js', 'file');
  }
}
/**
 * Implements hook_views_post_execute
 */
function asb_issues_views_post_execute(&$view) {
  if($view->name == 'goal_tree' && 'block' == $view->current_display) {
    if(isset($view->result[0]->_field_data['nid']['entity']->field_all_goals['und'])) {
      $goals = $view->result[0]->_field_data['nid']['entity']->field_all_goals['und'];
      $sorted_goals = asb_issues_order_goals($goals);
      $view->sorted_goals = $sorted_goals;
    }
  }
}

/**
 * Implements hook_views_pre_render
 */
function asb_issues_views_pre_render(&$view) {
  if($view->name == 'goal_tree' && 'block' == $view->current_display) {
    if(isset($view->sorted_goals)) {
      $mgoals = "<!-- Added in asb_issues.module -->";
      $sgoals = "";
      foreach($view->sorted_goals as $key => $value) {
        if(count($value) > 0) {
          $path = drupal_lookup_path('alias','node/'.$key);
          $node = node_load($key);
          $mgoals .= '<li class="first-goal nid-'.$node->nid.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
          foreach($value as $k => $v) {
            if(count($v) == 0) {
              $path = drupal_lookup_path('alias','node/'.$k);
              $node = node_load($k);
              $mgoals .= '<li class="sub-goal nid-'.$node->nid.' parent-'.$key.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
            }else{
              $path = drupal_lookup_path('alias','node/'.$k);
              $node = node_load($k);
              $mgoals .= '<li class="sub-goal nid-'.$node->nid.' parent-'.$key.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
              foreach($v as $kv => $vv) {
                $path = drupal_lookup_path('alias','node/'.$kv);
                $node = node_load($kv);
                $mgoals .= '<li class="sub-goal sub-sub-goal nid-'.$node->nid.' parent-'.$k.'"><a href="/'.$path .'">'.$node->title.'</a></li>';
              }
            }
          }
        }else{
          $path = drupal_lookup_path('alias','node/'.$key);
          $node = node_load($key);
          $sgoals .= '<li class="first-goal"><a href="/'.$path .'">'.$node->title.'</a></li>';
        }
      }
      $output = '<ul class="goal-tree">'.$mgoals.$sgoals.'</ul>';
      $view->result[0]->field_field_all_goals[0]['rendered'] = $output;
    }
  }
}

/**
 * Put goals in a one level hierarchy.
 */
function asb_issues_order_goals($goals) {
  $sorted = array();
  $nsorted = array();
  foreach($goals as $key => $value) {
    $node = node_load($value['target_id']);
    if (count($node->field_child_goals) > 0) {
      $nsorted[$value['target_id']] = array();
      foreach($node->field_child_goals['und'] as $k => $target) {
        $nsorted[$value['target_id']][$target['target_id']] = array();
      }
    }
    $result = db_query("SELECT field_parent_goal_target_id as parent FROM field_data_field_parent_goal
              WHERE entity_id = :nid", array(':nid' => $value['target_id']));
    $parent = $result->fetchField(0);
    // dsm($parent);
    if(!empty($parent)) {
      if(key_exists($value['target_id'],$sorted)) {
        $sorted[$parent][] = array($value['target_id']);
      }else{
        $sorted[$parent][] = array($value['target_id']);
      }
    }else{
      if(!key_exists($value['target_id'],$sorted)) {
        $sorted[$value['target_id']] = array();
      }
    }
  }
  foreach($sorted as $key => $value) {
    if(count($sorted[$key]) > 0) {
      unset($sorted[$key]);
    }
  }
  foreach($nsorted as $key => $value) {
    foreach($nsorted as $k => $v) {
      // dsm(array_search($key,$v));
      if(key_exists($key, $v)) {
        $nsorted[$k][$key] = $nsorted[$key];
        unset($nsorted[$key]);
      }
      $search = array_search($key,$v);
      if($search != false) {
        $nsorted[$k][$search] = array($key => $value);
        unset($nsorted[$key]);
        // dsm($nsorted);

      }
    }
  }
  foreach($nsorted as $key => $value) {
    $sorted[$key] = $value;
  }
  return $sorted;
}

/**
 * Implements hook_action_info()
 *
 * Including rules here because for some reason
 * rules was not picking up the rules.inc file
 *
 */
function asb_issues_action_info() {
  return array(
    'asb_issues_save_goal_action' => array(
      'type' => 'node',
      'label' => t('Save goal term on goal approval'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}


/**
 * Sends email to facilitator on scheme creation
 */
function asb_issues_save_goal_action($node, $context) {
  $vid = 5;
  $parent = '';
  if(isset($node->field_scheme_goals_taxonomy['und'][0]['tid'])) {
    $parent = $node->field_scheme_goals_taxonomy['und'][0]['tid'];
  }
  // Create the term object
  $term = new stdClass();
  $term->vid = $vid;
  $term->name = $node->title;
  $term->description = $node->body['und'][0]['value'];
  $term->parent = $parent;
  $tree = taxonomy_get_tree(5);
  $in_tree = FALSE;
  foreach($tree as $value) {
    if($value->name != $term->name) {
      continue;
    }else{
      $in_tree = TRUE;
    }
  }
  if($in_tree == FALSE) {
    taxonomy_term_save($term);
    drupal_set_message('Goal, ' .$term->name .', saved as taxonomy term.');
    watchdog('action', 'Saved new goal, %goal, as taxonomy term.', array('%goal' => $term->name));
  }else{
    drupal_set_message('Taxonomy term ' .$term->name .' already exists', 'warning');
    watchdog('action', 'Failed to save new goal, %goal, as taxonomy term.', array('%goal' => $term->name));
  }
}
