<?php

/**
 * Implements hook_init()
 */
function asb_modal_init() {
  // Borrow from modal_forms
    _modal_forms_doheader();
}


/**
 * Implements hook_menu()
 */
function asb_modal_menu() {
  // Create an ajax path for the modal
  $items['asb-modal-callback/%ctools_js/%/%'] = array(
    'page callback' => 'asb_modal_modal_callback',
    'page arguments' => array(1,2,3),
    'access arguments' => array('create update content'),
    'file' => 'asb_modal.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['asb-modal-og-callback/%ctools_js/%/%'] = array(
    'page callback' => 'asb_modal_og_modal_callback',
    'page arguments' => array(1,2,3),
    'access arguments' => array('create update content'),
    'file' => 'asb_modal.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['asb-modal/%ctools_js/comment/reply/%node'] = array(
    'title' => 'Comment',
    'page callback' => 'asb_modal_comment_reply',
    'page arguments' => array(1, 4),
    'access arguments' => array('post comments'),
    'file' => 'asb_modal.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_alter()
 */
function asb_modal_form_alter(&$form, &$form_state, $form_id) {
  // Check for update_node_form as a modal and set the og_context
  // for the node to be created and remove access to the form.
  if(preg_match('/^(update|event|announcement)_node_form$/',$form_id) && strpos($form['#action'], '/asb-modal-callback/ajax/') !== false) {
    $form['og_group_ref']['und'][0]['default']['#default_value'] = $form_state['og_context'];
    $form['og_group_ref']['#access'] = false;
    $form['field_image']['#access'] = false;
    $form['field_video']['#access'] = false;
    // Set default option to private and title from group visibility.
    $form['group_content_access']['und']['#default_value'] = 2;
    unset($form['group_content_access']['und']['#options'][0]);
    unset($form['group_content_access']['und']['#title']);
    
  }
  if($form_id == 'comment_node_scheme_form' || $form_id == 'comment_node_update_form') {
    // Next we add our JavaScript file, named after_ajax.js. This file
    // lives in the /js folder inside our module:
    $form['#attached']['js'] = array(
      array(
        'type'  => 'file',
        'data' => drupal_get_path('module', 'asb_modal') . '/js/after_ajax.js',
      ),
    );
    // Here we add ajax callbacks tn node forms
    // based on the node they are associated with
    // We use the comment-wrapper.tpl.php to add 
    // a distinct id to each node form.
    $wrapper = 'ajax-comment-wrap-' .$form_state['build_info']['args'][0]->nid;
    $form['actions']['submit']['#ajax'] = array(
      'wrapper' => $wrapper,
      'callback' => 'asb_modal_return_comment_callback',
      'method' => 'replace',
      'effect' => 'slide'
    );
  }
  // Add javascript on all modal form loads to change titles
  // And remove other unwanted options from modal forms
  if(strpos($form['#action'], '/asb-modal-callback/ajax/') !== false) {
    // Unset the preview button
    unset($form['actions']['preview']);
    // here we remove the label from the body field
    $form['body']['und'][0]['#title'] = "";
    // add title tranform js
    ctools_add_js('asb_modal_title', 'asb_modal');
  }
}

/**
 * ajax callback for comments
 */
function asb_modal_return_comment_callback(&$form, &$form_state) {
  $path = current_path();
  $form['current_path'] = $path;
  $comment = comment_load($form_state['values']['cid']);
  $comment->ajax_header = '<h2 class="title comment-form">' .t('Thanks for contributing!') .'</h2>';
  // $comment['ajax_header'] = '<h2 class="title comment-form">' .t('Thanks for contributing!') .'</h2>';
  $node = node_load($form_state['values']['nid']);
  $output = comment_view($comment, $node, 'full');
  // If it's a modal we want to provide javascript to
  // close the modal dialog and reload the display.
  if(strpos($form['#action'], 'asb-modal/') != false) {
    $commands = array();
    $wrapper = 'ajax-comment-wrap-' .$form_state['build_info']['args'][0]->nid;
    $commands[] = ajax_command_replace($wrapper, $output);
    $commands[] = array(
      // The command will be used in our JavaScript file (see next section)
      'command' => 'afterAjaxCallbackAsb',
    );
    return array('#type' => 'ajax', '#commands' => $commands);
  }else{
    return $output;
  }
}


function asb_modal_block_info() {
  $blocks['modal_update'] = array(
    'info' => t('Modal Update Block'),
  );
  return $blocks;
}

/**
 * Implements hook_views_pre_view
 *
 * Populate the ajax loaded scheme content
 * with add content links.
 */
function asb_modal_views_pre_view(&$view, &$display_id, &$args) {
  if($view->views_ui_context !== TRUE && $view->name == 'scheme_content'){
    // here we call asb_modal_settings to theme
    // header content add links
    $header = asb_modal_settings(arg(3), array('update','event','announcement'));
    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => FALSE,
      'content' => $header,
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $view->display_handler->set_option('header', array('text' => $options));
  }
}

function asb_modal_settings($gid, $node_types = array()) {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();

    $asb_style = array(
      'asb-modal-style' => array(
        'modalSize' => array(
          'type' => 'scale',
          'width' => .50,
          'height' => .50,
          'addWidth' => 20,
          'addHeight' => 30,
          'contentRight' => 10,
          'contentBottom' => 10,
        ),
        'modalOptions' => array(
          'opacity' => .6,
          'background-color' => '#684C31',
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'asb_modal',
        // Customize the AJAX throbber like so:
        // This function assumes the images are inside the module directory's "images"
        // directory:
        // ctools_image_path($image, $module = 'ctools', $dir = 'images')
        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'asb_modal'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      ),
    );
    // Add the settings array defined above to Drupal 7's JS settings:
    drupal_add_js($asb_style, 'setting');
    drupal_add_js(array('asb_modal' => array('types' => $node_types)), 'setting');
    ctools_add_js('asb_modal', 'asb_modal');

    ctools_add_css('asb_modal', 'asb_modal');
    // $group = og_context();
    $links = array();
    foreach($node_types as $key => $type) {
      if(og_user_access('node', $gid, "create $type content")) {
        $links[] = ctools_modal_text_button(t('Add ' .ucfirst($type)),'asb-modal-callback/nojs/' .$type .'/' .$gid, t('Add ' .ucfirst($type)), 'ctools-modal-asb-modal-style node-add add-' .$type);
      }
    }
    $output =  theme('item_list', array('items' => $links));
    return $output;
}

/**
 * modify the block view, add modal settings,
 * and create modal links.
 */
 
function asb_modal_block_view($block_name) {
  if ($block_name == 'modal_update') {
   
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();

    $asb_style = array(
      'asb-modal-style' => array(
        'modalSize' => array(
          'type' => 'scale',
          'width' => .50,
          'height' => .50,
          'addWidth' => 20,
          'addHeight' => 30,
          'contentRight' => 10,
          'contentBottom' => 10,
        ),
        'modalOptions' => array(
          'opacity' => .6,
          'background-color' => '#684C31',
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'asb_modal',
        // Customize the AJAX throbber like so:
        // This function assumes the images are inside the module directory's "images"
        // directory:
        // ctools_image_path($image, $module = 'ctools', $dir = 'images')
        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'asb_modal'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      ),
    );
    // Add the settings array defined above to Drupal 7's JS settings:
    drupal_add_js($asb_style, 'setting');
    // ctools_add_js('asb_modal', 'asb_modal');
    ctools_add_css('asb_modal', 'asb_modal');
    $group = og_context();
    return array(
      'subject' => t('Modal Update Title!'),
      'content' => ctools_modal_text_button(t('Click Here!'),'asb-modal-callback/nojs/' .$group['gid'], t('Click Here!'), 'ctools-modal-asb-modal-style'),
    );
  }
}

/**
 * Implements hook_element_info_alter
 */
function asb_modal_element_info_alter(&$type) {
  // Here we process the text_format element and remove
  // it if it's in the modal view.
  if (isset($type['form']['#action']) && strpos($type['form']['#action'], '/asb-modal-callback/ajax/') !== false) {
    if (isset($type['text_format']['#process'])) {
      foreach ($type['text_format']['#process'] as &$callback) {
        if ($callback === 'filter_process_format') {
          $callback = 'asb_modal_process_format';
        }
      }
    }
  }
}

/**
 * format processor called from asb_modal_element_info_alter
 *
 * removes the text_format element.
 */
function asb_modal_process_format($element) {
  // array of field names to restrict (add more here as needed)
  $fields = array(
    'field_textarea',
    'comment_body',
  );
  $element = filter_process_format($element);
  $element['format']['#attributes']['class'][] = 'element-hidden';
  // Hide the 'text format' pane below certain text area fields.
  if (isset($element['#field_name']) && in_array($element['#field_name'], $fields)){
    $element['format']['#access'] = FALSE;
  }
  // Hide 'text format' pane on all text area modal fields.
  if($element['#type'] == 'text_format') {
    $element['format']['#access'] = FALSE;
  }
  return $element;
}


/**
 * Implements hook_wysiwyg_editor_settings_alter()
 **/
function asb_modal_wysiwyg_editor_settings_alter(&$settings, $context) {
  if(arg(1) == 'ajax') {
    if ($context['profile']->editor == 'ckeditor' && isset($settings['height'])) {
      $settings['height'] = 150;
    }
  }
}

/**
 * Generate form button for user removal from scheme 
 * on the scheme member modal
 */
function asb_modal_remove_user($gid, $uid) {
  $output = drupal_get_form('asb_modal_form', $gid, $uid);
  return $output;
}

/**
 * Implements hook_form()
 *
 * Create a form for user removal from scheme
 * only show single submit button
 */
function asb_modal_form($form, &$form_state) {
  $form = array();
  $form['group_type'] = array(
    '#type' => 'hidden',
    '#value' => 'node',
  );
  $form['gid'] = array(
    '#type' => 'hidden',    
    '#value' => array('gid' => isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : ''),
  );
  $form['entity_type'] = array(
    '#type' => 'hidden',
    '#value' => 'user',
  );
  $form['etid'] = array(
    '#type' => 'hidden',
    '#value' => array('etid' => isset($form_state['build_info']['args'][1]) ? $form_state['build_info']['args'][1] : ''),
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Remove Member'),
  );
  // dsm($form);
  // dsm($form_state);
  return $form;
}

function asb_modal_form_validate(&$form, &$form_state) {
  // Make sure we have a user uid and a gid
  if(empty($form_state['input']['gid']) || $form_state['input']['gid'] == 0) {
    form_set_error('gid', 'Something went wrong, group id failed validation.');
  }elseif(empty($form_state['input']['etid']) || $form_state['input']['etid'] == 0) {
    form_set_error('etid', 'Something went wrong, user id failed validation.');
  }
}

function asb_modal_form_submit(&$form, &$form_state) {
  og_ungroup($form_state['input']['group_type'], $form_state['input']['gid'], 
    $form_state['input']['entity_type'], $form_state['input']['etid']);
}


/**
 * Implements hook_preprocess_links()
 *
 * Use modals for comment forms.
 */
function asb_modal_preprocess_links(&$variables) {
  if(isset($variables['links']['comment-reply'])) {
    $variables['links']['comment-reply']['href'] = 'asb-modal/nojs/' .$variables['links']['comment-reply']['href'];
    $variables['links']['comment-reply']['attributes']['class'][] = 'ctools-use-modal';
    $variables['links']['comment-reply']['attributes']['class'][] = 'ctools-modal-mfe-modal';
  }
}

/**
 * Implements hook_form_BASE_FROM_ID_alter().
 * Taken from modal_forms
 */
function asb_modal_form_comment_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('modal_forms_comment', 0)) {
    $comment = $form_state['comment'];

    // If not replying to a comment, use our dedicated page callback for new
    // comments on nodes.
    if (empty($comment->cid) && empty($comment->pid)) {
      // Change the action to call our function.
      $form['#action'] = url('asb-modal/nojs/comment/reply/' . $comment->nid);
    }
  }
}
