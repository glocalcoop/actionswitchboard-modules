<?php
/**
 * @file
 * Canned Emails allows you to generate email
 * templates to be sent to individual users.
 */

/**
 * Implements hook_menu().
 */
function canned_email_menu() {
  $items['admin/config/canned_email'] = array(
    'title' => 'Canned Emails',
    'description' => 'Adjust Canned Email settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('canned_email_admin_settings'),
    'access arguments' => array('administer canned emails'),
    'file' => 'canned_email.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/email'] = array(
    'title' => 'Email',
    'page callback' => 'canned_email_emails',
    'page arguments' => array(1),
    'access callback' => 'canned_email_node_tab_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'canned_email.pages.inc',
    'weight' => 100,
  );
  $items['user/%user/email'] = array(
    'title' => 'Email',
    'page callback' => 'canned_email_emails',
    'page arguments' => array(1),
    'access callback' => 'canned_email_user_tab_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'canned_email.pages.inc',
    'weight' => 100,
  );
  // Menu items for our canned_email entity
  /* $items['admin/structure/canned_email/manage'] = array( */
  /*   'title' => 'Canned Email Admin', */
  /*   'description' => 'Manage Canned Emails', */
  /*   'page callback' => 'canned_email_info', */
  /*   'access arguments' => array('administer canned emails'), */
  /* ); */
  /* $items['canned_email/%canned_email'] = array( */
  /*   'title callback' => 'canned_email_page_title', */
  /*   'title arguments' => array(1), */
  /*   'page callback' => 'canned_email_page_view', */
  /*   'page arguments' => array(1), */
  /*   'access arguments' => array('send canned emails'), */
  /*   'type' => MENU_CALLBACK, */
  /* ); */

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/canned_email/manage'] = array(
    'title' => 'Administer canned_email entity type',
    'page callback' => 'canned_email_list_entities',
    'access arguments' => array('administer canned emails'),
  );

  // Add canned email entities.
  $items['admin/structure/canned_email/manage/add'] = array(
    'title' => 'Add a Canned Email  Entity',
    'page callback' => 'canned_email_entity_add',
    'access arguments' => array('administer canned emails'),
    'type' => MENU_LOCAL_ACTION,
  );

  // List of all canned email entities.
  $items['admin/structure/canned_email/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['canned_emails/email/%canned_email'] = array(
    'title callback' => 'canned_email_page_title',
    'title arguments' => array(2),
    'page callback' => 'canned_email_view',
    'page arguments' => array(2),
    'access arguments' => array('send canned emails'),
    'type' => MENU_CALLBACK,
  );

  // 'View' tab for an individual entity page.
  $items['canned_emails/email/%canned_email/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['canned_emails/email/%canned_email/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('canned_email_entity_form', 2),
    'access arguments' => array('administer canned emails'),
    'type' => MENU_LOCAL_TASK,
  );

  // Add example entities.
  $items['canned_emails/canned_email/add'] = array(
    'title' => 'Add a Canned Email',
    'page callback' => 'canned_email_add',
    'access arguments' => array('administer canned emails'),
  );


  return $items;
}

/**
 * Implements hook_permission().
 */
function canned_email_permission() {
  $permissions = array();
  $permissions = array(
    'administer canned emails' => array(
      'title' => t('Administer canned emails'),
      'description' => t('Administer and configure canned emails.'),
    ),
    'send canned emails' => array(
      'title' => t('Send canned emails'),
      'description' => t('Allows user access to send canned emails tab on nodes and user pages.'),
    ),
  );
  return $permissions;
}

/**
 * Access callback for email tab on nodes.
 * 
 * Check that node is a correct type for tab
 * and that the user has permission to access.
 */
function canned_email_node_tab_access() {
  global $user;
  $allowed = variable_get('canned_email_content_types', array());
  // Tried to use $node = menu_get_object() here, but
  // it caused a segmentation fault.
  $node = node_load(arg(1));
  if(in_array($node->type, $allowed) && user_access('send canned emails')) {
    return TRUE;
  }
}

/**
 * Access callback for email tab on user profile.
 * 
 * Check that node is a correct type for tab
 * and that the user has permission to access.
 */
function canned_email_user_tab_access() {
  global $user;
  $allowed = variable_get('canned_email_user');
  if($allowed == 1 && user_access('send canned emails')) {
    return TRUE;
  }else{
    return FALSE;
  }
}


/****** Begin Entity Construction ******/

/**
 * Implements hook_entity_info()
 */
function canned_email_entity_info() {
  $canned_email_info['canned_email'] = array(
    'label' => t('Canned Email'),
    'controller class' => 'CannedEmailController',
    'base table' => 'canned_email',
    'uri callback' => 'canned_email_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'ceid',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'canned_email' > array(
        'label' => 'Canned Email Message',
        'admin' => array(
          'path' => 'admin/structure/canned_email/manage',
          'access arguments' => array('administer canned emails'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Canned Email Full Display'),
        'custom settings' => FALSE,
      ),
    )
  );
  return $canned_email_info;
}

/**
 * Implements hook_uri().
 */
function canned_email_uri($canned_email) {
  return array(
    'path' => 'canned_email/' .$canned_email->id,
  );
}

/**
 * Implements hook_load().
 */
function canned_email_load($ceid = NULL, $reset = FALSE) {
  $ceids = (isset($ceid) ? array($ceid) : array());
  $canned_email = canned_email_load_multiple($ceids, $reset);
  return $canned_email ? reset ($canned_email) : FALSE;
}

/**
 * Implements hook_load_multiple();
 */
function canned_email_load_multiple($ceids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('canned_email', $ceids, $conditions, $reset);
}

/**
 * info callback for menu items
 */
function canned_email_info() {
  return ('Welcome to the Canned Email administration');
}

function canned_email_page_title($canned_email) {
  return $canned_email->name;
}

/**
 * Implements hook_page_view()
 */
function canned_email_page_view($canned_email, $view_mode = 'full') {
  $canned_email->content = array();
  // Build fields content.
  field_attach_prepare_view('canned_email', array($canned_email->ceid => $canned_email), $view_mode);
  entity_prepare_view('canned_email', array($canned_email->ceid => $canned_email));
  $canned_email->content += field_attach_view('canned_email', $canned_email, $view_mode);
  $canned_email->content['email_subject'] = array(
    '#type' => 'item',
    '#title' => t('Email Subject'),
    '#markup' => '<div class="canned-email-body">' .$canned_email->email_subject .'</div>',
  );
  $canned_email->content['email_body'] = array(
    '#type' => 'item',
    '#title' => t('Email Body'),
    '#markup' => '<div class="canned-email-body">' .nl2br($canned_email->email_body) .'</div>',
  );
  $canned_email->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Date Created'),
    '#markup' => '<div class="canned-email-created">' .format_date($canned_email->created,'long') .'</div>',
  );

  return $canned_email->content;
}

/**
 * Implements hook_field_extra_fields().
 * This is leftover and currently doesn't seem to be needed,
 * but hanging on to it for legacy (memory) purposes
 */
function canned_email_field_extra_fields() {
  /* $return = array(); */
  /* $return['canned_email']['canned_email'] = array( */
  /*   'form' => array( */
  /*     'email_subject' => array( */
  /*       'label' => t('Email Subject'), */
  /*       'description' => t('This is the email subject line'), */
  /*       'weight' => -10, */
  /*     ), */
  /*     'email_body' => array( */
  /*       'label' => t('Email Body'), */
  /*       'description' => t('This is the email body, you can use tokens here.'), */
  /*       'weight' => 30, */
  /*     ), */
  /*   ), */
  /* ); */
  /* dsm($return); */
  /* return $return; */
}

function canned_email_add() {
  $canned_email = (object) array (
    'ceid' => '',
    'type' => 'canned_email',
    'language' => language_default(),
    'name' => '',
    'email_subject' => '',
    'email_body' => '',
  );
  $entity = entity_get_controller('canned_email')->create();
  return drupal_get_form('canned_email_entity_form', $canned_email);
}
 

function canned_email_entity_form($form, &$form_state, $entity) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Canned Email Name'),
    '#description' => t('Use a short descriptive name for the canned email.'),
    '#default_value' => $entity->name,
    '#required' => TRUE,
    '#weight' => -100,
  );
  $form['email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Subject'),
    '#default_value' => $entity->email_subject,
    '#weight' => -10,
    '#required' => TRUE,
  );
  $form['email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email Message'),
    '#default_value' => $entity->email_body,
    '#required' => TRUE,
    '#weight' => 30,
  );
  if(module_exists("token")) {
    $form['token_help']['content'] = array(
      '#type' => 'markup',
      '#token_types' => 'all',
      '#theme' => 'token_tree',
      '#token_types' => array('site', 'node', 'user'),
      '#global_types' => TRUE,
      '#click_insert' => TRUE,
    );
  }
  $form['canned_email_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('canned_email_edit_delete'),
    '#weight' => 200,
  );
  
  field_attach_form('canned_email', $entity, $form, $form_state);
  
  return $form;
}


/**
 * Validation handler for entity_example_basic_add_form form.
 *
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */

function canned_email_entity_form_validate($form, &$form_state) {
  $canned_email_submisttion = (object) $form_state['values'];
  field_attach_form_validate('canned_email', $canned_email_submisttion, $form, $form_state);
}
 
function canned_email_entity_form_submit($form, &$form_state) {
  $canned_email_submission = (object) $form_state['values'];
  field_attach_submit('canned_email', $canned_email_submission, $form, $form_state);
  if(isset($form['canned_email_entity']['#value']->ceid)) {
    $canned_email_submission->ceid = $form['canned_email_entity']['#value']->ceid;
  }
  $canned_email = canned_email_save($canned_email_submission);
  $form_state['redirect'] = "canned_emails/email/$canned_email->ceid";
}

/**
 * Use the controller to save the entity.
 */
function canned_email_save(&$entity) {
  return entity_get_controller('canned_email')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function canned_email_delete($entity) {
  entity_get_controller('canned_email')->delete($entity);
}


/***** CRIBBED FROM THE ENTITY EXAMPLE MODULE *****/

/**
 * Returns a render array with all canned_email entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function canned_email_list_entities() {
  $content = array();
  // Load all of our entities.
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'canned_email')
    ->entityCondition( 'ceid', '>', 0)
    ->execute();
  $ceids = array();
  foreach($results['canned_email'] as $key => $value) {
    $ceids[] = $value->ceid;
  }
  $entities = canned_email_load_multiple($ceids);
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => $entity->ceid,
          'name' => l($entity->name, 'canned_emails/email/' . $entity->ceid),
          'email_subject' => $entity->email_subject,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Canned Email Name'), t('Email Subject')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No canned email entities currently exist.'),
    );
  }
  return $content;
}

function canned_email_entity_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('canned_email')->create();
  return drupal_get_form('canned_email_entity_form', $entity);
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function canned_email_view($entity, $view_mode = 'full') {
  // Our entity type, for convenience.
  $entity_type = 'canned_email';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->ceid => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->ceid => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['email_subject'] = array(
    '#type' => 'item',
    '#title' => t('Email Subject'),
    '#markup' => '<div class="canned-email-body">' .$entity->email_subject .'</div>',
  );
  $entity->content['email_body'] = array(
    '#type' => 'item',
    '#title' => t('Email Body'),
    '#markup' => '<div class="canned-email-body">' .nl2br($entity->email_body) .'</div>',
  );
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Date Created'),
    '#markup' => '<div class="canned-email-created">' .format_date($entity->created,'long') .'</div>',
  );

  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('canned_email_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Form deletion handler.
 *
 * @todo: 'Are you sure?' message.
 */
function canned_email_edit_delete($form, &$form_state) {
  $entity = $form_state['build_info']['args'][0];
  canned_email_delete($entity);
  drupal_set_message(t('The canned email %name (ID %id) has been deleted',
    array('%name' => $entity->name, '%id' => $entity->ceid))
  );
  $form_state['redirect'] = 'admin/structure/canned_email/manage/list';
}
