<?php

function asb_scheme_init() {
  ctools_include('ajax');
  mailsystem_set(array(
      // '{$module}_{$key}' => 'MimeMailSystem', // Just messages with $key sent by $module.
    'asb_scheme' => 'MimeMailSystem', // All messages sent by $module.
  ));
  // Add modal js
  drupal_add_js(array(
      'asb-scheme-modal' => array(
        'modalSize' => array(
          'type' => 'scale',
          'width' => .50,
          'height' => .50,
          'addWidth' => 20,
          'addHeight' => 30,
          'contentRight' => 10,
          'contentBottom' => 10,
        ),
        'animation' => 'fadeIn',
      ),
    ), 'setting');
}

function asb_scheme_cron() {
  // asb_scheme_civicrm_api();
  _asb_scheme_update_skills();
  asb_scheme_remove_extra_leaders();
}

/**
 * Implements hook_views_api().
 */
function asb_scheme_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'asb_scheme') . '/includes/views',
  );
}

/**
* Implements hook_entity_info_alter().
*/
function asb_scheme_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_teaser'] = array(
    'label' => t('Search teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_formatter_info().
 */
function asb_scheme_field_formatter_info() {
  return array(
    'asb_scheme_location_link' => array(
      'label' => t('Asb Scheme Location Link'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function asb_scheme_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Extract required field information.
  $vocabulary = taxonomy_vocabulary_machine_name_load($field['settings']['allowed_values'][0]['vocabulary']);
  $elements = array();
  switch ($display['type']) {
    // Create the correct term entities for theming
    case 'asb_scheme_location_link':
      foreach($items as $id => $item) {
        // Get parent entity if it exists
        $parents = array_keys(taxonomy_get_parents($item['tid']));
        // Make sure we only try to create parents if they exist
        if(!empty($parents)) {
          $parent_entity = entity_load('taxonomy_term', array($parents[0]));
          $uri = entity_uri('taxonomy_term', $parent_entity[10]);
          $parent = array(
            '#type' => 'link',
            '#title' => $parent_entity[10]->name,
            '#href' => $uri['path'],
            '#options' => $uri['options'],
          );
        }else{
          // Otherwise return null
          $parent = NULL;
        }
        $term = entity_load('taxonomy_term', array($items[0]['tid']));
        $term_id = array_keys($term);
        $uri = entity_uri('taxonomy_term', $term[$term_id[0]]);
        $element = array(
          '#type' => 'link',
          '#title' => $term[$term_id[0]]->name,
          '#href' => $uri['path'],
          '#options' => $uri['options'],
        );
        if($parent != NULL) {
          $elements[$item['tid']] = array(
            '#markup' => theme('asb_scheme_formatter_location', array('element' => $element, 'parent' => $parent)),
          );
        }else{
          $elements[$item['tid']] = array(
            '#markup' => theme('asb_scheme_formatter_location', array('parent' => $element,)),
          );
        }
      }
      break;
  }
  return $elements;
}

/**
 * Format location term reference for scheme teasers.
 */
function theme_asb_scheme_formatter_location($variables) {
  $output = '';
  $items = array();
  $separator = ' > ';
  // Sort variables so parent comes before element
  krsort($variables);
  foreach($variables as $level => $item) {
    // Build the markup for the links.
    if($level == 'element' && $item != NULL) {
      $line  = '<span class="lineage-item lineage-item-level-' .$level .'">';
      $line .= drupal_render($item);
      $line .= '</span>';
      $items[] = $line;
    }elseif($level == 'parent' && $item != NULL) {
      $line  = '<span class="lineage-item lineage-item-level-' .$level .'">';
      $line .= drupal_render($item);
      $line .= '</span>';
      $items[] = $line;
    }
  }
  $output .= implode($separator, $items);
  return $output;
}

/**
* Implements hook_preprocess_node().
*/
function asb_scheme_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'search_teaser') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__search_teaser';
    $vars['leader'] = asb_scheme_get_scheme_leader($vars['nid']);
    $vars['leader_markup'] = '<div class="scheme-leader"><a href="/user/' .$vars['leader']['uid'] .'">';
    $vars['leader_markup'] .= $vars['leader']['name'] .'</a></div>';
    // Create markup for completed schemes.
    // unset($vars['content']['goals']);
    if(isset($vars['field_issues_goals'][0])) {
      $link_markup = l($vars['field_issues_goals'][0]['entity']->title,
                     'node/' .$vars['field_issues_goals'][0]['target_id'],
                     array('attributes' => array(
                         'class' => array('issue-link'),
                         'title' => $vars['field_issues_goals'][0]['entity']->title)));
      $vars['content']['issues']['#markup'] = $link_markup;
    }

    unset($vars['content']['field_issues_goals']);
    // Set the fans based on flag counts
    $flags = flag_get_counts('node', $vars['nid']);
    // If there are no flags set an arbitrary number of fans
    if(isset($flags['subscribe_og'])) {
      $vars['fans'] = $flags['subscribe_og'];
    }else{
      $vars['fans'] = 0;
    }
    // Get og membership for the scheme
    $members = og_membership_load_multiple(FALSE, array('gid' => $vars['nid'], 'entity_type' => 'user'));
    // Set the membership count.
    $vars['people_count'] = count($members);
  }
}

/**
 * Implements hook_menu_local_tasks_alter()
 *
 * Here we modify tabs to handle special cases
 * like the Updates tab.
 */
function asb_scheme_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;
  $check = array_intersect(array('facilitator', 'administrator'), array_values($user->roles));
  // Add a tab linking to ajax loading tab on scheme pages

  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    // If the node is not a scheme, then we remove
    // any reference to the members tab and
    // if the user is not authenticated we remove the view tab.

    // TODO: Add logic so that if the view tab is the only one
    // that is displayed it get's hidden by default.
    
    if($node->type != 'scheme') {
      foreach($data['tabs'][0]['output'] as $key => $value) {
        if($value['#link']['path'] == 'node/%/members') {
            unset($data['tabs'][0]['output'][$key]);
            $check = array_intersect(array('preauthorized', 'anonymous user'), array_values($user->roles));
            if(empty($check) ? FALSE : TRUE) {
                unset($data['tabs'][0]['output'][0]);
            }
        }
      }
    }

    if($node->type == 'scheme'
      && $node->workflow_state_name != 'Needs Review') {
  /* if(isset($router_item['page_arguments'][0]->type) */
  /*   || (isset($router_item['page_arguments'][0]) */
  /*     && $router_item['page_arguments'][0] == 'scheme_members') */
  /*   || $router_item['path'] == 'node/%/group') { */
  /*   if((isset($router_item['page_arguments'][0]->type)  */
  /*       && $router_item['page_arguments'][0]->type == 'scheme') */
  /*     || (isset($router_item['page_arguments'][0])  */
  /*       && $router_item['page_arguments'][0] == 'scheme_members') */
  /*     || (isset($router_item['page_arguments'][0]->workflow_state_name) */
  /*       && $router_item['page_arguments'][0]->workflow_state_name != 'Needs Review') */
  /*     || $router_item['path'] == 'node/%/group' ) { */
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => t('Updates'),
          'href' => 'asb_scheme/nojs/scheme_content',
          'localized_options' => array(
            'attributes' => array(
              'title' => t('Show scheme updates'),
              'id' => 'asb-scheme-ajax-link',
            ),
          ),
        ),

        // Define whether this link is active. This can be omitted for
        // implementations that add links to pages outside of the current page
        // context.
        '#active' => ($router_item['path'] == $root_path),
      );
      $count = count($data['tabs'][0]['output']);
      if(isset($date['tabs'][0]['count'])) {
        $data['tabs'][0]['count'] == $count;
      }
      // Remove extra tabs if scheme is in Needs Review state
    }elseif($node->type == 'scheme'
      && $node->workflow_state_name == 'Needs Review'
      && $check == FALSE) {
      foreach($data['tabs'][0]['output'] as $key => $value) {
        if($key > 1) {
          unset($data['tabs'][0]['output'][$key]);
        }
      }
    }
  }
}

function asb_scheme_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['menu_local_task'])) {
    $theme_registry['menu_local_task']['function'] = 'theme_asb_scheme_local_task'; // The new theme function.
  }
}

function theme_asb_scheme_local_task(&$variables) {

  $link = $variables['element']['#link'];
  $link_text = $link['title'];

  if (!empty($variables['element']['#active'])) {
    // Add text to indicate active tab for non-visual users.
    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';

    // If the link does not contain HTML already, check_plain() it now.
    // After we set 'html'=TRUE the link will not be sanitized by l().
    if (empty($link['localized_options']['html'])) {
      $link['title'] = check_plain($link['title']);
    }
    $link['localized_options']['html'] = TRUE;
    $link_text = t('!local-task-title!active', array('!local-task-title' => $link['title'], '!active' => $active));
  }
  if(isset($link['localized_options']['attributes']['id']) && $link['localized_options']['attributes']['id'] == 'asb-scheme-ajax-link') {
    unset($variables['element']['#active']);
    // return '<li' . (!empty($variables['element']['#active']) ? ' class="active ctools-use-ajax"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";
    // Returns an ajax response tab containing the scheme updates view url
    return '<li' . (!empty($variables['element']['#active'])  ? ' class="active update-tab ctools-use-ajax"' : ' class="update-tab ctools-use-ajax"') . '>' .ctools_ajax_text_button( 'Updates', 'asb_scheme/nojs/scheme_content/page/' .arg(1), t('Get view content.')) . "</li><!-- Added in asb_scheme module line 61. -->\n";
    // return '<li' . (!empty($variables['element']['#active']) ? ' class="active update-tab ctools-use-ajax"' : '') . '>' .ctools_ajax_text_button( 'Updates', 'asb_scheme/nojs/scheme_content/page/' .arg(1), t('Get view content.')) . "</li><!-- Added in asb_scheme module line 61. -->\n";
  }else{
    return '<li' . (!empty($variables['element']['#active']) ? ' class="active"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";
  }
}

/**
 * Implements hook_menu()
 *
 * Ajax call back for displaying updates
 * and
 * Call back for approving scheme members
 */
function asb_scheme_menu() {
  $items = array();
  $items['admin/config/asb_scheme'] = array(
    'title' => t('Asb Scheme Civi Settings'),
    'description' => 'Adjust asb scheme civicrm settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asb_scheme_admin_settings'),
    'access arguments' => array('administer CiviCRM'),
    'file' => 'asb_scheme.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['asb_scheme/%ctools_js/scheme_content/%/%'] = array(
    'title' => "Updates",
    'page callback' => 'asb_scheme_display_view',
    'page arguments' => array(1,2,3,4),
    'access callback' => TRUE,
    'file' => 'asb_scheme.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // Approve a single membership.
  $items['group/%/%/admin/people/approve-membership/%og_membership'] = array(
    'title' => 'Approve',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asb_scheme_approve_membership', 1, 2, 6),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('manage members', 1, 2),
    'file' => 'asb_scheme.admin.inc',
  );
  // Delete a single membership.
  $items['group/%/%/admin/people/delete-membership2/%og_membership'] = array(
    'title' => 'Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asb_scheme_delete_membership', 1, 2, 6),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('manage members', 1, 2),
    'file' => 'asb_scheme.admin.inc',
  );
  $items['node/%node/members'] = array(
    'title' => 'Members',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'asb_scheme_display_members',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'file' => 'asb_scheme.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter()
 *
 * We modify the default behavior
 * of the og_ui module to display our own
 * membership management.
 */
function asb_scheme_menu_alter(&$items) {
  // $path = 'node/%node/members';
  // $items[$path]['access arguments'][] = $items[$path]['access callback'];
  /* $items[$path]['access callback'] = 'asb_scheme_menu_access'; */
  // Membership management tab
  $items['node/%/group'] = array(
    'title' => "Edit Members",
    'page callback' => 'asb_scheme_group_admin_overview',
    'page arguments' => array('node', 1),
    'access callback' => 'og_ui_get_group_admin',
    'access arguments' => array('node', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => drupal_get_path('module', 'asb_scheme') .'/asb_scheme.admin.inc',
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  // User listing pages.
  $items['group/%/%/admin/people']['title arguments'] = array('Add schemers to @group', 1, 2);
}

/**
 * helper function to remove workflow fields in modal field edit forms.
 */
function _asb_scheme_manage_workflow($form, &$form_state) {
  $form['workflow']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_media_browser_plugins_alter().
 */
function asb_scheme_media_browser_plugins_alter(&$plugins) {
  global $user;
  $dest = current_path();
  $path = explode('/', $_SERVER['HTTP_REFERER']);
  $des = drupal_get_destination();
  if(strpos($des['destination'], 'types[video]') !== false) {
    unset($plugins['library']);
    unset($plugins['upload']);
  }
}

/**
 * Implements hook_form_comment_form_alter()
 */
function asb_scheme_form_comment_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Submit');
}

function asb_scheme_privatemsg_message_presave_alter(&$message) {
  // We turn the gid saved in the asb_pm_og_submit function
  // into a fielded entity reference.
  if(isset($message->gid)) {
    $message->field_scheme_reference['und'][0]['target_id'] = $message->gid;
  }
}

function asb_scheme_privatemsg_og_validate(&$form, &$form_state) {
  if($form_state['values']['join'] == 0) {
    unset($form['#validate'][1]);
    unset($form['#submit'][0]);
    $form_state['values']['subject'] = $form_state['sender'] .' wants to donate to '
      .$form_state['scheme_name'];
  }
}

/**
 * Add submit handler for og subscription
 */
function asb_scheme_privatemsg_og_submit(&$form, &$form_state) {
  $skills = "<strong>I've got skills: </strong>";
  // Build the skills for output
  foreach($form_state['values']['skills'] as $key => $value) {
    if(!empty($value) || $value != 0) {
      $skills .= $value .', ';
    }
  }
  $skills = rtrim($skills, ', ');
  // Send the message to the scheme leader
  $recipients = array(user_load($form_state['values']['scheme_leader']));
  $subject = $form_state['values']['subject'];
  $body = $skills .$form_state['values']['body']['value'];
  // Here we store the gid for later use
  $options = array('format' => 'filtered_html', 'gid' => $form_state['values']['gid']);
  $result = privatemsg_new_thread($recipients, $subject, $body, $options);
  if($result == TRUE && !empty($result['message'])) {
    $account = $recipients[0];
    if($form_state['values']['join'] == 1) {
      privatemsg_filter_add_tags(array($result['message']->thread_id), array(2), $account);
    }
    drupal_set_message(t('Your message was sent.'));
  }else{
    drupal_set_message('Something went wrong, your message failed..:-(');
  }
}

/**
 * Implements hook_form_user_login_alter()
 */
function asb_scheme_form_user_login_alter(&$form, &$form_state) {
  $form['name']['#weight'] = -10;
  $form['pass']['#weight'] = -9;
}

/**
 * Implements hook_form_alter
 */
function asb_scheme_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if($form_id == 'og_ui_add_users') {
    unset($form['og_user']['roles']);
    $form['og_user']['#title'] = t('Add a new schemer');
    $form['return'] = array(
      '#markup' => '<div class="ui-button back-scheme"><a href="/node/' .$form['gid']['#value'] .
      '/group" title="Back to Scheme">Back to Scheme</a></div>',
      '#weight' => -1,
    );
    $form['actions']['submit']['#value'] = "Add User";
  }
  // Add private messaging to the subscribe confirmation
  if($form_id == 'og_ui_confirm_subscribe') {
    if(arg(0) == 'asb-modal') {
      $scheme = node_load(arg(3));
    }else{
      $scheme = node_load(arg(2));
    }

    // Turn skills into checkbox options.
    $skills = array();
    $items = field_get_items('node', $scheme, 'field_people_skills');
    if(!empty($items)) {
      foreach($items as $key => $value) {
        $output = field_view_value('node', $scheme, 'field_people_skills', $value);
        $skills[$output['#markup']] = $output['#markup'];
      }
    }
    // $form['subject']['#default_value'] = $user->name .' wants to donate to '. $scheme->title;
    // $form['subject']['#type'] = 'hidden';
    $form_state['scheme_name'] = $scheme->title;
    $form_state['sender'] = $user->name;
    $form['privatemsg'] = array(
      '#title' => t('Introduce Yourself'),
      '#type' => 'fieldset',
      '#description' => "Tell us a little about your self and why you'd like to get involved.",
    );
    $form['privatemsg']['subject'] = array(
      '#title' => t('Subject'),
      '#type' => 'hidden',
      '#default_value' => $user->name .' wants to join '. $scheme->title,
    );
    $form['privatemsg']['skills'] = array(
      '#title' => count($skills) > 0 ? t('What skills would you like to offer?') : '',
      '#type' => 'checkboxes',
      '#options' => $skills,
    );
    (!isset($form_state['message_type'])) ? $form_state['message_type'] = arg(7) : TRUE;
    $state = og_is_member('node', $scheme->nid, 'user', $user, array(OG_STATE_PENDING));
    if($form_state['message_type'] == 'donate') {
      if($state == 1) {
        $type = 'hidden';
        $default_value = 0;
      }else{
        $type = 'checkbox';
        $default_value = 1;
      }
      $form['privatemsg']['join'] = array(
        '#title' => t('Check this box to join the scheme.'),
        '#type' => $type,
        '#default_value' => $default_value,
      );
      $form['actions']['submit']['#value'] = 'Send Message';
    }else{
      $form['privatemsg']['join'] = array(
        '#title' => t('Check this box to join the scheme.'),
        '#type' => 'hidden',
        '#default_value' => 1,
      );
    }
    $form['actions']['submit']['#value'] = 'Send Request';
    $form['privatemsg']['body'] = array(
      '#title' => t('Message'),
      '#type' => 'text_format',
      '#format' => 'filtered_html',
      '#required' => TRUE,
    );
    $form['privatemsg']['gid'] = array(
      '#type' => 'hidden',
      '#default_value' => arg(2),
    );
    $form['privatemsg']['scheme_leader'] = array(
      '#type' => 'hidden',
      '#default_value' => $scheme->uid,
    );
    $form['#validate'][] = $form['#validate'][0];
    $form['#validate'][0] = 'asb_scheme_privatemsg_og_validate';
    $form['#submit'][] = 'asb_scheme_privatemsg_og_submit';
    $form_state += array(
      'ajax' => TRUE,
      're_render' => FALSE,
      'no_redirect' => TRUE,
    );
    $form['#after_build'][] = 'asb_scheme_modal_after_build';
  }
  if($form_id == 'user_login') {
    $form['html_markup'] = array('#markup' => t('<div class="reset-pass"><a class="reset-pass-link" href="/user/password">Forgot your password?</a></div><!-- Added in asb_scheme.module -->'));
  }
  // This removes all "Scheme Creation:" workflow designations
  // from views exposed forms.
  if(isset($form_state['view']) && $form_id == 'views_exposed_form') {
    if(isset($form['sid'])) {
      foreach($form['sid']['#options'] as $key => $value) {
        $form['sid']['#options'][$key] = str_replace('Scheme Creation: ', '', $form['sid']['#options'][$key]);
      }
    }
  }
  if($form_id == 'views_form_og_members_admin_default') {
    $check = array_intersect(array('facilitator', 'administrator'), array_values($user->roles));
    if($check != TRUE) {
      foreach($form['add_roles']['#options'] as $key => $value) {
        if($value == 'Scheme Leader') {
          unset($form['add_roles']['#options'][$key]);
        }
      }
      foreach($form['remove_roles']['#options'] as $key => $value) {
        if($value == 'Scheme Leader') {
          unset($form['remove_roles']['#options'][$key]);
        }
      }
    }
  }
  // Make modifications to scheme_overview_filtered view
  // Set label as display value for all selections.
  if(isset($form_state['view']->filter['status']->view->name) && $form_state['view']->filter['status']->view->name == 'scheme_overview_filtered') {
    if($form_id == 'views_exposed_form') {
      if(isset($form['created'])) {
        $form['created']['#theme'] = 'select_as_links';
      }
      $keys = array_keys($form);
      foreach($keys as $key => $value) {
        if(strpos($value,'field') !== FALSE && $form[$value]['#type'] == 'select' && !isset($form[$value]['#theme'])) {
          if($form['#info']['filter-' .$value]['label'] != "Issue") {
            $form[$value]['#options']['All'] = $form['#info']['filter-' .$value]['label'];
          }else{
            unset($form[$value]['#options']['All']);
          }
        }
        if(isset($form[$value]['#theme'])) {
          if(isset($form[$value]['#options'][0]) && $form[$value]['#options'][0] == "Is not from the movie") {
            unset($form[$value]['#options'][0]);
          }
        }
      }
      if(isset($form['secondary'])) {
        foreach($form['secondary'] as $key => $value) {
          if(is_array($value)) {
            $form['secondary'][$key]['#options']['All'] = $form['secondary'][$key]['#title'];
          }
        }
      }
    }
  }
  // Modifies the view filter on the scheme search view to explicitly
  // set the issues connected to the scheme.
  if (isset($form_state['view']->filter['field_issues_goals_target_id'])) {

    $issues = asb_scheme_get_issues();
    $issue_list = array();
    foreach($issues as $key => $issue) {
      $issue_list[] = array(
        'title' => t($issue->title),
        'operator' => "=",
        'value' => array(
          'value' => $issue->nid,
          'min' => '',
          'max' => '',
        )
      );
      $form['field_issues_goals_target_id']['#options'][] = t($issue->title);
    }
    // unset($form_state['view']->display_handler->handlers['filter']['field_issues_goals_target_id']->options['group_info']['group_items']);
    foreach($issue_list as $key => $issue) {
      $form_state['view']->display_handler->handlers['filter']['field_issues_goals_target_id']->options['group_info']['group_items'][] = $issue;
    }
  }
  if (isset($form_state['view']->filter['field_material_needs_value'])) {
    $mneeds = asb_scheme_format_needs_view_array();
    // unset($form['field_material_needs_value']['#options']);
    foreach($mneeds as $key => $value) {
      $form['field_material_needs_value']['#options'][] = t($value['title']);
    }
    unset($form_state['view']->display_handler->handlers['filter']['field_material_needs_value']->options['group_info']['group_items']);
    $form_state['view']->display_handler->handlers['filter']['field_material_needs_value']->options['group_info']['group_items'] = $mneeds;
  }
  $pos = strpos($form['#action'], 'mfe-single-modal-callback');
  // Modify field modal edit form
  if($form_id == 'scheme_node_form' && $pos !== false) {
    // Remove preview and delete buttons
    $form['actions']['preview']['#access'] = false;
    $form['actions']['delete']['#access'] = false;
    // Remove workflow block on modals
    $form['#after_build'][] = '_asb_scheme_manage_workflow';
  }
  // Add redirect on scheme creation
  if($form_id == 'scheme_node_form' && !isset($form_state['node']->nid) && $pos == false) {
    $form['actions']['submit']['#submit'][] = 'asb_scheme_redirect_success';
  }else{
    // drupal_add_js(drupal_get_path('module', 'asb_scheme') . '/js/scheme-issues.js', 'file');
  }
  // Check if the form has steps and add progress markup.
  if(!empty($form['#steps']) && arg(2) != 'edit' && $pos === false) {
    // Add scheme title to the steps display
    // TODO: May want to add settings to include images
    // to the progress markup.
    // add it after forms.css
    drupal_add_css( drupal_get_path('module', 'asb_scheme') . '/css/scheme_add_edit.css', array('group' => CSS_THEME, 'type' => 'file', 'weight'=>2 ));

    $output = '<div id="stepper-add-scheme"><ul>';
    // oldschool
    $i = 1;
    foreach($form['#steps'] as $step_name => $step) {
      if( $form_state['storage']['step'] == $step_name) {
        $output .= '<li class="current '. $step_name . '">' . $i . '<span>' . $step_name . '</span></li>';
      }else{
        $output .= '<li class="'. $step_name . '">' . $i . '<span>' . $step_name . '</span></li>';
      }
      $i ++;
    }
    $output .= '</ul></div>';
    $form['progress'] = array(
      '#markup' => $output,
      '#weight' => 150,
    );
    // Add scheme title to each step
    if(!empty($form_state['values']['title'])) {
      $title_out = '<h2 class="scheme-title">' .$form_state['values']['title'] .'</h2>';
      $form['temptitle'] = array(
        '#markup' => $title_out,
        '#weight' => -10,
      );
    }
  }
}

/**
 * After build form adjustment
 */
function asb_scheme_modal_after_build($form) {
  global $user;
  $check = array_intersect(array('facilitator', 'administrator'), array_values($user->roles));
  if($check != TRUE) {
    $form['privatemsg']['body']['format']['guidelines']['#attributes']['class'][] = 'invisible no-format-select';
    $form['privatemsg']['body']['format']['format']['#attributes']['class'][] = 'invisible no-format-select';
    $form['privatemsg']['body']['format']['format']['#title_display'] = 'none';
  }
  return $form;
}

/**
 * Create a material needs list for the view handler
 *
 * Returns a database object containing material need names 'mneed'
 */
function asb_scheme_build_material_needs() {
  $sql = "SELECT DISTINCT field_material_needs_value AS mneed
            FROM {field_data_field_material_needs} ORDER BY mneed";
  $result = db_query($sql)->fetchAll();
  return $result;
}

function asb_scheme_format_needs_view_array() {
  $group_items = array();
  $needs = asb_scheme_build_material_needs();
  foreach($needs as $need) {
    $group_items[] = array(
      'title' => $need->mneed,
      'operator' => 'contains',
      'value' => $need->mneed,
    );
  }
  return $group_items;
}

/**
 * Get all issues and return a database object
 */
function asb_scheme_get_issues() {
  $sql = "SELECT nid, title FROM {node} WHERE type = 'issue' ORDER BY title";
  $result = db_query($sql);
  $results = $result->fetchAll();
  return $results;
}

/**
 * Implements hook_form_submit
 */

function asb_scheme_redirect_success($form, &$form_state) {
  // Redirect to custom page solution
  $form_state['redirect'] = 'scheme-created/' .$form_state['nid'];
}

/**
 * Implements hook_og_context_negotiation_info().
 *
 * We are adding a new way to set the group context, based on a path like 'scheme/%/whatever',
 * so group views and custom pages retain the group context.
 *
 * Technically this does not seem to work, but it should
 * so I'm leaving it in.
 *
 * What does work is modifying the theme.inc file explicitly for
 * this functionality.
 */
function asb_scheme_og_context_negotiation_info() {
  $providers = array();
  $providers['asb_scheme'] = array(
    'name' => t('Scheme url'),
    'description' => t("Select scheme context for any url that starts with 'scheme/%'. Make sure that all views and custom pages use paths that start with this value in order for the context to be recognized when viewing those pages, and that nothing that is not a group uses that path."),
    'callback' => 'asb_scheme_context_handler_url',
  );
  return $providers;
}

/**
 * Context handler; Get schemes from URL.
 */
function asb_scheme_context_handler_url() {
  $context = array();
  if (arg(0) == 'scheme' && is_numeric(arg(1))) {
    $group = og_group('node', arg(1));
    if (!empty($group) && !empty($group->gid)) {
      $context = array($group->gid);
    }
  }
  return $context;
}

/**
 * Implements hook_block_info().
 *
 * Add a custom group statistics and attendees blocks.
 */
function asb_scheme_block_info() {
  $blocks['group_info'] = array(
    'info' => t('Scheme Leader'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['node_links'] = array(
    'info' => t('Scheme content links'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['user_message'] = array(
    'info' => t('User Custom Login'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['facilitator_contact'] = array(
    'info' => t('Contact Facilitator'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implement hook_theme().
 */
function asb_scheme_theme() {
  $module_path = drupal_get_path('module', 'asb_scheme');
  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );
  return array(
    'asb_scheme_group_info' => $base + array(
      'render element' => 'element',
      'template' => 'asb-scheme-group-info',
    ),
    'asb_scheme_group_links' => $base + array(
      'render element' => 'element',
      'template' => 'og-extras-group-links',
    ),
    'asb_scheme_user_message' => $base + array(
      'render_eleement' => 'element',
      'template' => 'asb-scheme-user-message',
    ),
    'asb_scheme_formatter_location' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Add a custom group statistics and create content blocks.
 */
function asb_scheme_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'group_info':
      // The info block is visible to everyone, group member or not.
      $content = theme('asb_scheme_group_info');
      if (!empty($content)) {
        $block['subject'] = t('Scheme Leader');
        $block['content'] = $content;
        // $block['content'] = "Hi schemer!";
      }
      break;

    case 'node_links':
      // Links are visible to people with permissions.
      $content = theme('asb_scheme_group_links');
      if (!empty($content)) {
        $block['subject'] = t('Create content');
        $block['content'] = $content;
      }
      break;

    case 'user_message':
      // Show user Hello and login
      $content = theme('asb_scheme_user_message', array('messages' => privatemsg_unread_count($user)));
      if (!empty($content)) {
        $block['content'] = $content;
      }
      break;
    case 'facilitator_contact':
      // Show facilitator contact link
      $block['subject'] = t('Need help?');
      $block['content'] = asb_scheme_facilitator_link();
      break;
  }
  return $block;
}

/**
 * Get and theme facilitator contact link
 */
function asb_scheme_facilitator_link() {
  $gid = og_context('node');
  $node = node_load($gid['gid']);
  if(isset($node->field_facilitator['und'][0]['target_id'])) {
    $fac_uid = $node->field_facilitator['und'][0]['target_id'];
    $user = user_load($node->field_facilitator['und'][0]['target_id']);
    // $contact = privatemsg_get_link($user);
    $contact = "user/" .$user->uid ."/contact";
    $link_markup = '<div class="facilitator-button"><a href="/';
    // $link_markup .= $contact .'?facilitator=1&gid=' .$gid['gid'] .'">Contact ' .$user->name .'</a></div>';
    $link_markup .= $contact .'">Contact ' .$user->name .'</a></div>';
    $link_markup .= '<div class="facilitator-text">Your Facilitator</div>';
  }else{
    $result = db_query("SELECT uid FROM {users_roles} ur WHERE rid = 6 ORDER BY RAND() LIMIT 1");
    $record = $result->fetchObject();
    $user = user_load($record->uid);
    // $contact = privatemsg_get_link($user);
    $contact = "user/" .$user->uid ."/contact";
    $link_markup = '<div class="facilitator-text">Uh Oh! Looks like you haven\'t been assigned a Facilitator.';
    $link_markup .= 'Please send a message to the Facilitator below and let them know you need help.</div>';
    $link_markup .= '<div class="facilitator-button"><a href="/';
    // $link_markup .= $contact .'?facilitator=1&gid=' .$gid['gid'] .'">Contact ' .$user->name .'</a></div>';
    $link_markup .= $contact .'">Contact ' .$user->name .'</a></div>';
  }
  return $link_markup;
}

/**
 * Implements hook_context_plugins()
 */
function asb_scheme_context_plugins() {
  $plugins = array();
  $plugins['asb_scheme_context_condition_author'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'asb_scheme') .'/plugins',
      'file' => 'asb_scheme_context_condition_author.inc',
      'class' => 'asb_scheme_context_condition_author',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry()
 */
function asb_scheme_context_registry() {
  $plugin =  array(
    'conditions' => array(
      'author' => array(
        'title' => t('Content Author'),
        'plugin' => 'asb_scheme_context_condition_author',
      ),
    ),
  );
  return $plugin;
}

/**
 * Implements hook_node_presave()
 * Used to clean up htmlcharacters in node title.
 */
function asb_scheme_node_presave($node) {
  $node->title = htmlspecialchars_decode($node->title, ENT_QUOTES);
}

/**
 * Creates the scheme create content links.
 */
function asb_scheme_node_links() {
  $group = og_context();

  $types = array();
  foreach (node_type_get_types() as $type) {
    if (og_is_group_content_type('node', $type->type)) {
      $types[$type->type] = $type->type;
    }
  }

  $content = og_node_create_links($group['group_type'], $group['gid'], OG_AUDIENCE_FIELD, NULL, NULL);
  return drupal_render($content);
}

/**
 * Implements hook_node_view
 */
function asb_scheme_node_view($node, $view_mode, $langcode){
  if($view_mode == 'full') {
    if($plugin = context_get_plugin('condition', 'author')) {
      $plugin->execute($node);
    }
  }
  switch ($node->type) {
    case 'issue':
      $node->content['links']['issue_reference_link'] = array(
        '#weight' => 100, // place it at the bottom
        '#markup' => '<div class="add-goal">' .l('Recommend a goal', 'node/add/goal', array('query' => array('field_issue_reference' => $node->nid))) .'</div>',
      );
    case 'scheme':
      // Move image field above progress if no video exists.
      if(isset($node->field_video) && isset($node->field_image)) {
        if(count($node->field_video) == 0 && count($node->field_image) > 0) {
          $node->content['field_image']['#weight'] = 2;
        }
      }
      // Make changes to scheme node views add markup to content variable.
      drupal_add_css(drupal_get_path('module', 'asb_scheme') . '/css/progress.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
     drupal_add_css(drupal_get_path('module', 'asb_scheme') . '/css/slideshow.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
       drupal_add_library('jquery_plugin', 'cycle');
      drupal_add_js(drupal_get_path('module', 'asb_scheme') . '/js/asb-scheme.js', 'file');
      // Create progress bar markup
      if (isset($node->field_progress['und'][0])) {
        $progress = $node->field_progress['und'][0]['value'];
        if( is_numeric($progress) && $progress > 0 && $progress <= 100 ) {
          $progress_string = strval(round($progress));
          $progress_decimal = asb_scheme_val_to_dec($progress);
          $style = "width: ".round($progress)."%; display: block";
          $node->content['field_progress'][0]['#markup'] = '<div class="progress-bar" data-progress="' .$progress_decimal[1];
          $node->content['field_progress'][0]['#markup'] .= '"><div class="progress" style="width:'.$progress_decimal[0] .'%">&nbsp;</div></div>';
          $node->content['field_progress'][0]['#markup'] .= '<div class="scheme-major-ticks"><div class="scheme-minor-ticks"></div></div>';
          $node->content['field_progress'][0]['#markup'] .= '<!-- Progress bar code built in asb_scheme_node_view() -->';
        }else{
          unset($node->content['field_progress']);
        }

      }
      // Create issues/goals markup
      if (isset($node->field_issues_goals['und'])) {
        $issues_goals = asb_scheme_format_issues_goals($node);
        /* Add markup for issues */
        $node->content['issues'] = array(
          '#weight' => -100,
          '#markup' => $issues_goals['issues'],
        );
        /* Add markup for goals */
        $node->content['goals'] = array(
          '#weight' => -99,
          '#markup' => $issues_goals['goals'],
        );
      }
      /* Here we unset images if a video exists. */
      /* if (isset($node->content['field_video'])) { */
      /*     unset($node->content['field_image']); */
      /* } */
      $node->content['format_created'] = array(
        '#weight' => -101,
        '#markup' => date('j/m/y', $node->created),
      );
      global $user;
      // Here we change the text for membership based on the user's
      // membership status.
      $membership = og_get_membership('node', $node->nid, 'user', $user->uid);
      if(!empty($membership)) {
        if($membership->state == 2) {
          $node->content['group_group'][0]['#title'] = "Membership Pending";
        }elseif($membership->state == 1) {
          $node->content['group_group'][0]['#title'] = "Leave Scheme";
        }
      }else{
        $node->content['group_group'][0]['#title'] = "Request Membership";
      }
      if ($view_mode == 'search_teaser') {
        // Here we modify values for the search teaser view mode
        $node->content['field_leader'] = array();
        $leader = asb_scheme_get_scheme_leader($node->nid);
        $node->content['field_leader'][0]['#markup'] = '<div class="scheme-leader"><a href="/user/' .$leader['uid'] .'">';
        $node->content['field_leader'][0]['#markup'] .= $leader['name'] .'</a></div><!-- Added in asb_scheme_node_view -->';
        // set field_people_skills as count
        $people_needs_count = isset($node->field_people_skills['und']) ? count($node->field_people_skills['und']) : 0;
        unset($node->content['field_people_skills']);
        $node->content['field_people_skills'][0]['#markup'] = $people_needs_count;
        // set field_material_needs as count
        if(isset($node->field_material_needs['und'])) {
          $material_needs_count = count($node->field_material_needs['und']);
        }else{
          $material_needs_count = 0;
        }
        unset($node->content['field_material_needs']);
        $node->content['field_material_needs'][0]['#markup'] = $material_needs_count;
        $funding_needs_count = asb_scheme_funds_raised($node);
        unset($node->content['field_funding_needs']);
        $node->content['field_funding_needs'][0]['#markup'] = $funding_needs_count;
      }

      break;
  }
}

/**
 * Format issues and goals for a scheme.
 */
function asb_scheme_format_issues_goals($node) {
  $output['issues'] = '';
  $output['goals'] = '';
  foreach ($node->field_issues_goals['und'] as $key => $value) {
    if(isset($value['entity'])) {
      if ($value['entity']->type == 'issue') {
        $output['issues'] = '<a href="/node/' .$value['target_id'] .'">' .$value['entity']->title .'</a>';
        $output['issues'] .= '<!-- Link added in asb_scheme_format_issues_goals -->';
      }
    }
  }
  if(isset($node->field_scheme_goals_taxonomy['und'])) {
    foreach($node->field_scheme_goals_taxonomy['und'] as $key => $tid) {
      $term = taxonomy_term_load($tid['tid']);
      $output['goals'] .= '<li><a href="/taxonomy/term/' .$tid['tid'] .'">'
        .$term->name .'</a></li>';
    }
  }
  return $output;
}

/**
 * Function to get needs contribute row counts
 * to show total Material and Skills needs
 *
 * TODO: Expand this to include funding needs
 * once we have a mechanism to measure that.
 */
function asb_scheme_get_view_rowcount(){
  $view = views_get_current_view();

  // Check view need_type and return markup for the template.
  if(!empty($view->need_type)) {
    if($view->need_type == 'funds') {
      $funds_raised = asb_scheme_funds_raised(node_load(arg(1)));
      return '<h1 class="funds-raised">$' .$funds_raised .'</h1>';
    }
    if($view->need_type == 'skill') {
      $text = "skills displayed.";
    }elseif($view->need_type == 'supplies') {
      $text = "supplies displayed.";
    }
    $page_total = count($view->result);
    if(isset($view->total_rows)){
      return '<h6 class="needs-count">' . $page_total . " of " . $view->total_rows ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    } else {
      return '<h6 class="needs-count">' . $page_total . " of " . $page_total ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    }
  }
}

/**
 * Add designation for skills v. supplies in
 * scheme_contribute view.  For populating
 * correct text to the view template for counts
 * of completed schemes.
 *
 * used by asb_scheme_get_view_rowcount
 */
function asb_scheme_views_pre_render(&$view) {
  global $user;
  if($view->name == 'scheme_contribute') {
    if($view->current_display == 'block') {
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $account = clone $user;
        if (node_access("update", $node, $account) === TRUE) {
          $modal_markup = '<div class="modal-edit"><a class="ctools-use-modal ctools-modal-mfe-modal" href="/mfe-single-modal-callback/nojs/!1/scheme/field_people_skills">Edit</a></div>';
          $view->header['area']->options['content'] = $modal_markup .$view->header['area']->options['content'];
        }
      }
    $view->need_type = 'skill';
    }
    if($view->current_display == 'block_1') {
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $account = clone $user;
        if (node_access("update", $node, $account) === TRUE) {
          $modal_markup = '<div class="modal-edit"><a class="ctools-use-modal ctools-modal-mfe-modal" href="/mfe-single-modal-callback/nojs/!1/scheme/field_material_needs">Edit</a></div>';
          $view->header['area']->options['content'] = $modal_markup .$view->header['area']->options['content'];
        }
      }
      $view->need_type = 'supplies';
    }
    if($view->current_display == 'block_2') {
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $account = clone $user;
        if (node_access("update", $node, $account) === TRUE) {
          $modal_markup = '<div class="modal-edit"><a class="ctools-use-modal ctools-modal-mfe-modal" href="/mfe-single-modal-callback/nojs/!1/scheme/field_funding_needs">Edit</a></div>';
          $view->header['area']->options['content'] = $modal_markup .$view->header['area']->options['content'];
        }
      }
      $view->need_type = 'funds';
    }
  }
  if($view->name == 'scheme_members') {
    if($view->current_display = 'block_1') {
      global $user;
      $check = array_intersect(array('facilitator', 'administrator'), array_values($user->roles));
      if($node = node_load(arg(1))) {
        $membership = og_get_membership('node', $node->nid, 'user', $user->uid);
        if(empty($membership) && empty($check)) {
          // Here we exclude the schemer name from the display.
          $view->display_handler->handlers['field']['name']->options['exclude'] = 1;
        }
        if(!node_access('update', $node, $user) && $node->uid != $user->uid) {
          $view->header['area']->options['content'] = '';
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render
 *
 * This function takes commented text from a view footer
 * and replaces it with our markup.
 *
 * @params
 * <!--skills-MESSAGE-->
 * <!--supplies-MESSAGE-->
 */
function asb_scheme_views_post_render(&$view, &$output, &$cache) {
  if($view->name == 'scheme_contribute') {
    $gid = og_context('node');
    if(isset($gid['gid'])){
      global $user;
      $node = node_load($gid['gid']);
      $userref = user_load($node->uid);
      $link_markup = '<div class="donate-button"><a href="/';
      if($view->current_display == 'block') {
        if($user->uid != 0) {
          $contact = privatemsg_get_link($userref);
          // $link_markup .= $contact .'?skills=1&gid=' .$gid['gid'] .'">Donate Skills</a></div>';
          // $link_markup .= 'group/node/' .$gid['gid'] .'/subscribe/og_user_node">Donate Skills</a></div>';
          $donate_link = 'asb-modal/group/node/' .$gid['gid'] .'/subscribe/og_user_node/nojs/donate';
          $link_markup = '<div class="donate-button">';
          $link_markup .= ctools_modal_text_button('Donate Skills', $donate_link, t('Donate Skills'), 'ctools-use_modal ctools-modal-asb-scheme-modal');
          $link_markup .= '</div>';
        }else{
          $link_markup = '<a class="ctools-use-modal ctools-modal-modal-popup-small" href="/modal_forms/nojs/login">Donate Skills</a>';
        }
        // this strstr function replaces the necessary string.
        $output = strtr($output, array('<!--skills-MESSAGE-->' => $link_markup));
        // $output = $link_markup;
      }elseif($view->current_display == 'block_1') {
        if($user->uid !=0) {
          $contact = privatemsg_get_link($userref);
          $link_markup .= $contact .'?supplies=1&gid=' .$gid['gid'] .'">Donate Supplies</a></div>';
        }else{
          $link_markup = '<a class="ctools-use-modal ctools-modal-modal-popup-small" href="/modal_forms/nojs/login">Donate Supplies</a>';
        }
        $output = strtr($output, array('<!--supplies-MESSAGE-->' => $link_markup));
      }
    }
  }
  if($view->name == 'scheme_members') {
    if($node = node_load(arg(1))) {
      global $user;
      $check = array_intersect(array('facilitator', 'administrator'), array_values($user->roles));
      $membership = og_get_membership('node', $node->nid, 'user', $user->uid);
      if(empty($membership) && empty($check)) {
        // Here we remove tags and identifying markup.
        $output = strip_tags($output, '<div><ul><li><p><img>');
        $output = preg_replace('/alt\=\\".*\\".*title\=\\".*\\"/im',"$1",$output);
      }
    }
  }
}

/**
 * helper function to turn value into decimal string.
 */
function asb_scheme_val_to_dec($num) {
  $num_var = array();
  $num = strval(round($num));
  $decimal = "." .$num;
  $num_var[] = $num;
  $num_var[] = $decimal;
  return $num_var;
}

/**
 * helper function to get the amount of funds
 * raised for the specific scheme from civicrm
 */
function asb_scheme_funds_raised($node = NULL) {
  if($node != NULL) {
    // Check for facilitator assignment.  If it does not
    // exist, then don't use civicrm to show funds needed.
    // Instead use the node->field_funding_needs.
    if(!isset($node->field_facilitator['und'][0])) {
      $raised = $node->field_funding_needs['und'][0]['value'];
      return $raised;
    }
    if(isset($node->field_donation_link['und'][0]['value'])) {
      $link = explode('&',$node->field_donation_link['und'][0]['value']);
      if(isset($link[1])) {
        $pcp_split = explode('=', $link[1]);
        $pcp_id = $pcp_split[1];
      }
    }else{
      $raised = "0";
      return $raised;
    }
    // Query civicrm for goal_amount and amount raised
    require_once(DRUPAL_ROOT .'/sites/default/civicrm.settings.php');
    require_once 'CRM/Core/DAO.php';
    $pcp_query = "SELECT SUM(amount) FROM civicrm_contribution_soft WHERE pcp_id = " .$pcp_id;
    $pcp_donated = CRM_Core_DAO::singleValueQuery( $pcp_query );
    $raised = $pcp_donated;
    $pcp_query2 = "SELECT goal_amount FROM civicrm_pcp WHERE id = " .$pcp_id;
    $pcp_donated = CRM_Core_DAO::singleValueQuery( $pcp_query2 );
    $goal = $pcp_donated;
    // Subtract amount raised from goal amount and format
    if($goal > $raised) {
      $raised = number_format($goal - $raised);
    }else{
      $raised = 0;
    }
  }else{
    $raised = "0";
  }
  return $raised;
}

/**
 * Get scheme owner(s)
 */
function asb_scheme_get_scheme_leader($gid) {
  $node = node_load($gid);
  $account = user_load($node->uid);
  $scheme_owner = array('name' => $account->name,
                          'uid' => $account->uid);
  return $scheme_owner;
}

/**
 * Implements hook_msnf_info_steps_alter()
 *
 * Remove steps on edit form.
 */
function asb_scheme_msnf_info_steps_alter(&$steps_cached, $entity_type, $bundle, $form) {
  if ($entity_type == 'node' && $bundle == 'scheme' && !empty($form['node']->nid)) {
    unset($steps_cached['node']['scheme']);
    return $steps_cached;
  }
}

/**** BEGIN rules configuration ****/
/**
 * Implements hook_action_info()
 *
 * Including rules here because for some reason
 * rules was not picking up the rules.inc file
 *
 */
function asb_scheme_action_info() {
  return array(
    'asb_scheme_email_facilitator_action' => array(
      'type' => 'system',
      'label' => t('Email Facilitator on scheme creation'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'asb_scheme_remind_facilitator_action' => array(
      'type' => 'system',
      'label' => t('Email reminder to facilitator'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'asb_scheme_create_civi_scheme_action' => array(
      'type' => 'node',
      'label' => t('Create scheme as civicrm organizational contact'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function asb_scheme_rules_action_info() {
  return array(
    'asb_scheme_create_civi_scheme_action' => array(
      'label' => t('Create or update scheme in civicrm.'),
      'parameter' => array(
        'node' => array(
          'type' => 'node',
          'label' => t('Scheme'),
        ),
      ),
    ),
  );
}

/**
 * Creates action to add civicrm organizational group from scheme.
 *
 * @params
 *   $info array of values from scheme to insert into org contact.
 */
function asb_scheme_create_civi_scheme_action($node, $context) {
  $author = user_load($node->uid);
  global $base_url;
  // Build our data array to pass to civi_api
  $url = $base_url .'/node/' .$node->nid;
  if($node->body['und'][0]['summary'] == '') {
    $body = strip_tags($node->body['und'][0]['value']);
  }else{
    $body = strip_tags($node->body['und'][0]['summary']);
  }
  $body .= ' -- <a href="' .$url .'">Visit Scheme</a>';
  if(isset($node->field_funding_needs['und'][0]['value'])) {
    $funding = is_numeric($node->field_funding_needs['und'][0]['value']) ? $node->field_funding_needs['und'][0]['value'] : 0;
  }else{
    $funding = 0;
  }
  $info = array(
    'nid' => $node->nid,
    'scheme_name' => $node->title,
    'email' => $author->mail,
    'home_url' => $url,
    'custom_106' => $body,
    'custom_107' => $funding,
  );
  // First we create the civi contact for the scheme
  $result = asb_scheme_civicrm_api($type = 'create_contact', 0, $info);
  global $user;
  $check = array_intersect(array('facilitator', 'administrator'), array_values($user->roles));
  if($result['is_error'] == 0) {
    // Here we reload the pcp identifier and save the node with the correct
    // value of the path to the campaign page.
    // We do that here because civicrm_post function can't load the node
    // with the correct values due a race condition.
    require_once(DRUPAL_ROOT .'/sites/default/civicrm.settings.php');
    require_once 'CRM/Core/DAO.php';
    $pcp_query = "SELECT id FROM civicrm_pcp WHERE contact_id = " .$result['values'][0]['id'];
    $pcp_id = CRM_Core_DAO::singleValueQuery( $pcp_query );
    $node->field_donation_link[LANGUAGE_NONE][0]['value'] = 'civicrm/contribute/transact?id=11&pcpId=' .$pcp_id .'&reset=1';
    // NOTE: If we decide to revert to showing the personal campaign page
    // uncomment the line below and remove the line above.
    // $node->field_donation_link[LANGUAGE_NONE][0]['value'] = 'civicrm/pcp/info?reset=1&id=' .$pcp_id;
    node_save($node);
    if($result['update'] == 1) {
      watchdog('action', 'Updated scheme %scheme in civi contacts', array('%scheme' => $info['scheme_name']));
      if(!empty($check)) {
        drupal_set_message("Scheme updated in civicrm!", 'status');
      }
    }else{
      watchdog('action', 'Added scheme %scheme to civi contacts', array('%scheme' => $info['scheme_name']));
      if(!empty($check)) {
        drupal_set_message("Scheme added to civicrm!", 'status');
      }
    }

    // get facilitator civicrm id
    $fac_cid = asb_scheme_civicrm_api('contact', $ufid = $node->field_facilitator['und'][0]['target_id']);
    // get scheme contact id from civicrm
    // get variables for relationships facilitator_relationship schemeleader_relationship
    // get scheme leader civi contact id
    $sl_cid = asb_scheme_civicrm_api('contact', $ufid = $node->uid);
    // build relationships in civcrm to the scheme contact.
    // Built a set of relationships to the newly created contact.
    // Use the following array structure
    /* $params = array( */
    /*   'relationship_type' => array( */
    /*     'version' => 3, */
    /*     'sequential' => 1, */
    /*     'id' => variable_get('facilitator_relationship'), */
    /*     'contact_id_a' => 595304, */
    /*     'contact_id_b' => 594886, */
    /*   ),
    /*   'other_relationship_type' => array ETC. */
    $fac_rel = variable_get('facilitator_relationship');
    $sl_rel = variable_get('schemeleader_relationship');
    if(!empty($fac_rel) && !empty($sl_rel)) {
      $params = array(
        'facilitator' => array(
          'version' => 3,
          'sequential' => 1,
          'relationship_type_id' => $fac_rel,
          'contact_id_a' => $result['values'][0]['id'],
          'contact_id_b' => $fac_cid['id'],
        ),
        'scheme_leader' => array(
          'version' => 3,
          'sequential' => 1,
          'relationship_type_id' => $sl_rel,
          'contact_id_a' => $result['values'][0]['id'],
          'contact_id_b' => $sl_cid['id'],
        ),
      );
      $rel_result = asb_scheme_civicrm_api('relationship', 0, NULL, $params);
      foreach($rel_result as $type => $res) {
        if($res != 'complete') {
          if($res['is_error'] == 0) {
            watchdog('action', 'Added %relation in civi contacts', array('%relation' => $type));
            drupal_set_message("Relationship, " .$type ." added to civicrm!");
          }else{
            watchdog('error', 'Relationship, %relation with cid %cid, failed to get added to civicrm contacts', array('%relation' => $type, '%cid' => $params[$type]['contact_id_b']));
            drupal_set_message("Something went wrong.  Relationship not added to civicrm!", 'warning');
          }
        }
      }
    }
  }else{
    watchdog('error', 'Scheme, %scheme with nid %nid, failed to get added to civicrm contacts', array('%scheme' => $info['scheme_name'], '%nid' => $info['nid']));
    if(!empty($check)) {
      drupal_set_message("Something went wrong.  Scheme not added to civicrm!", 'warning');
    }
  }
}

/**
 * Sends email to facilitator on scheme creation
 */
function asb_scheme_email_facilitator_action($node, $context) {
  $result = db_query('SELECT DISTINCT u.mail FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = 6');
  // Here we use the token_replace() function to
  // replace any tokens in the action form.

  $params = array(
    'context' => array(
      'subject' => token_replace($context['subject'], $context),
      'body' => token_replace($context['html_message'], $context),
    ),
    'plaintext' => "Here's the plaintext message",
  );
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  // Now, actually send the mails.
  if(empty($context['email_to']) || $context['email_to'] == '') {
    foreach ($result as $row) {
      $message = drupal_mail('asb_scheme', 'facilitator', $row->mail, language_default(), $params, $from);
      // $message = drupal_mail('registration_form', 'invitation', $email, language_default(), $params);
      if ($message['result']) {
        watchdog('action', 'Sent facilitator email to %email with subject - %subject', array('%email' => $row->mail, '%subject' => $context['subject']));
      }
    }
  }else{
    $message = drupal_mail('asb_scheme', 'facilitator', $context['email_to'], language_default(), $params, $from);
    // $message = drupal_mail('registration_form', 'invitation', $email, language_default(), $params);
    if ($message['result']) {
      watchdog('action', 'Sent facilitator email to %email with subject - %subject', array('%email' => $context['email_to'], '%subject' => $context['subject']));
    }else{
      watchdog('error', 'Failed to send facilitator email to %email with subject - %subject', array('%email' => $context['email_to'], '%subject' => $context['subject']));
    }
  }
}

/**
 * Implements hook_mail();
 */
function asb_scheme_mail($key, &$message, $params) {
  switch ($key) {
    case 'facilitator':
      $message['subject'] = $params['context']['subject'];
      $message['body'][] = $params['context']['body'];
      if(isset($params['context']['plaintext'])) {
        $message['body'][] = $params['context']['plaintext'];
      }
      break;
    case 'reminder':
      $message['subject'] = $params['context']['subject'];
      $message['body'][] = $params['context']['body'];
      break;
  }
}

/**
 * Notifies facilitators of unchanged schemes.
 */
function asb_scheme_remind_facilitator_action(&$entity, $context) {
  global $base_url;
  if(date("D h",time()) == "Mon 08") {
    $sql = "SELECT node.title, workflow_node.nid, field_facilitator_target_id AS fftid, users.mail
          FROM {workflow_node}
          LEFT JOIN {node}
          ON node.nid = workflow_node.nid
          JOIN {field_revision_field_facilitator}
          ON field_revision_field_facilitator.entity_id = node.nid
          JOIN {users}
          ON users.uid = field_facilitator_target_id
          WHERE stamp < (UNIX_TIMESTAMP() - 604800)
          AND sid = 2";
    $result = db_query($sql);
    $facs = array();
    foreach($result as $row) {
      $scheme = '<a href="' .$base_url .'/node/' .$row->nid .'">' .$row->title .'</a>';
      $facs[$row->mail]['uid'] = $row->fftid;
      if(isset($facs[$row->mail]['scheme_link'])) {
        $facs[$row->mail]['scheme_link'] .= $scheme ."\n";
      }else{
        $facs[$row->mail]['scheme_link'] = $scheme ."\n";
      }
    }

    // Create message text for each facilitator
    foreach($facs as $key => $value) {
      $facs[$key]['message'] = "Hi ASB Facilitator,\n\nThese schemes seem neglected, could you check?\n\n";
      $facs[$key]['message'] .= $facs[$key]['scheme_link'];
      $facs[$key]['message'] .= "\n\nYour Action Switchboard Auto-bot!";

      // Now, actually send the mails.
      $params = array(
        'context' => array(
          'subject' => 'Schemers need you!',
          'body' => $facs[$key]['message'],
        ),
      );
      $from = variable_get('site_mail', ini_get('sendmail_from'));
      $mail_key = 'reminder';
      $message = array('result' => TRUE);
      $message = drupal_mail('asb_scheme', $mail_key, $key, language_default(), $params, $from);
      watchdog('action', 'Sent facilitator reminder to %email with message %message', array('%email' => $key, '%message' => $facs[$key]['message']));
      if (!$message['result']) {
        break;
      }
    }
  }
}


/**
 * Generates settings form for asb_scheme_email_facilitator().
 *
 * @param $context
 *   An array of options of this action (in case it is being edited)
 *
 * @return array $form
 *
 * @see asb_scheme_action_info()
 */
function asb_scheme_email_facilitator_action_form($context) {
  /*
  * We return a configuration form to set the requirements that will
  * match this action before being executed. This is a regular Drupal form and
  * may include any type of information you want, but all the fields of the
  * form will be saved into the $context variable.
  *
  * In this case we are emailing a programmatically chosen facilitator, if no email
  * address is entered.
  *
  */
  $context += array(
    'format' => filter_fallback_format(),
  );
  $form['email_to'] = array(
    '#title' => t('Email address'),
    '#type' => 'textfield',
    '#description' => t('Email address to send the announcement to (ideally a mailing list). Leave blank to send to all facilitators individual email addresses.'),
    '#default_value' => isset($context['email_to']) ? $context['email_to'] : '',
  );
  $form['subject'] = array(
    '#title' => t('Subject'),
    '#type' => 'textfield',
    '#description' => t('Subject line of the email message.'),
    '#default_value' => isset($context['subject']) ? $context['subject'] : '',
  );
  $form['message'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
    '#description' => t('Message to send to the facilitator.'),
    '#default_value' => isset($context['message']) ? $context['message'] : '',
  );
  $form['html_message'] = array(
    '#title' => t('HTML Message Body'),
    '#type' => 'text_format',
    '#default_value' => isset($context['html_message']) ? $context['html_message'] : '',
    '#format' => $context['format'],
    '#description' => t('HTML formatted message to send to the facilitator.'),
  );
  $form['tokens'] = array(
    '#title' => t('Available Tokens'),
    '#theme' => 'token_tree',
    '#token_types' => array('node'), // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
    '#global_types' => TRUE, // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
    '#click_insert' => TRUE, // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
  );
  // No more options, return the form.
  return $form;
}

/**
 * Validates settings form for asb_scheme_email_facilitator_action().
 * Verifies that a subject and message exist.
 */
function asb_scheme_email_facilitator_action_validate($form, $form_state) {
  if ($form_state['values']['subject'] == "" || $form_state['values']['message'] == "") {
    form_set_error(t('Please, provide a subject and message.'));
  }
}

/**
 * Submit handler for asb_scheme_email_facilitator_action.
 *
 * Returns an associative array of values which will be available in the
 * $context when an action is executed.
 */
function asb_scheme_email_facilitator_action_submit($form, $form_state) {
  return array(
    'email_to' => $form_state['values']['email_to'],
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
    'html_message' => $form_state['values']['html_message']['value'],
    'format' => $form_state['values']['html_message']['format'],
  );
}

/**** END rules configuration ****/

/**
 * Implements civicrm_api
 *
 * @params
 *  $type 'contact', 'create_contact', 'tag', or 'skill'
 *  $ufid - drupal user_id required for contact record.
 *  $info - any needed additional information
 *
 * @returns
 * array of contact information:
 * first_name, last_name, city, state_province_name, country
 * or
 * list of skills from civi custom field
 * or
 * tag
 */
function asb_scheme_civicrm_api($type = 'contact', $ufid = 0, $info = NULL, $params = array()) {
  if(!isset($config)) {
    require_once(DRUPAL_ROOT .'/sites/default/civicrm.settings.php');
    require_once 'CRM/Core/Config.php';
    $config = CRM_Core_Config::singleton( );
  }
  require_once 'api/api.php';
  if ($type == 'contact') {
    try{
      $contact_id = civicrm_api3('UFMatch', 'get', array(
                    'version' => 3,
                    'sequential' => 1,
                    'uf_id' => $ufid,
                    'domain_id' => 2,
                  ));
      $params = array(
        'version' => 3,
        'sequential' => 1,
        'return' => 'first_name,last_name,city,country,email,state_province,custom_23,custom_23_label,custom_53,custom_53_label,custom_98,custom_93,custom_99,tag',
        'contact_id' => isset($contact_id['values'][0]['contact_id']) ? $contact_id['values'][0]['contact_id'] : '',
      );
      $contacts = civicrm_api3('Contact', 'get', $params);
      $contacts['skills'] = array();
      $params = array(
          'version' => 3,
          'sequential' => 1,
          'entity_id' => $contacts['values'][0]['contact_id'],
      );
      $result = civicrm_api('CustomValue', 'get', $params);
      foreach($result['values'] as $key => $value) {
        if($value['id'] == 23) {
          $skill_set = $value['latest'];
        }
      }
      // print_r($result);
      if(!empty($skill_set)) {
	foreach($skill_set as $key => $value) {
	  $option_params = array(
				 'version' => 3,
				 'sequential' => 1,
				 'option_group_id' => 90,
				 'value' => $value,
				 );
	  $option = civicrm_api3('OptionValue', 'get', $option_params);
	  $contacts['skills'][] = $option['values'][0]['label'];
	}
      asort($contacts['skills']);
      }
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
    }
  }elseif ($type == 'skills') {
    try{
      $contacts = civicrm_api3('OptionValue', 'get', array(
                    'version' => 3,
                    'sequential' => 1,
                    'option_group_id' => 90,
                  ));
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
    }
  }elseif($type == 'create_contact' && $info !== NULL) {
    // Check if the scheme is already in civicrm
    $check_params = array(
      'version' => 3,
      'sequential' => 1,
      'contact_sub_type' => 'Scheme',
      'external_identifier' => $info['nid'],
    );
    $check = civicrm_api('Contact', 'get', $check_params);
    try{
      $params = array(
        'version' => 3,
        'sequential' => 1,
        'contact_type' => 'Organization',
        'contact_sub_type' => 'Scheme',
        'organization_name' => $info['scheme_name'],
        'email' => $info['email'],
        'external_identifier' => $info['nid'],
        'home_url' => $info['home_url'],
        'custom_106' => $info['custom_106'],
        'custom_107' => $info['custom_107'],
      );
      // If scheme exists in civicrm update it
      if($check['count'] > 0) {
        $params['id'] = $check['id'];
        unset($params['home_url']);
        $result = civicrm_api('Contact', 'update', $params);
        $result['update'] = 1;
        $group_params = array(
          'version' => 3,
          'sequential' => 1,
          'contact_id' => $result['id'],
          'group_id' => 81,
        );
        try{
          $group_result = civicrm_api('group_contact', 'create', $group_params);
        }
        catch (CiviCRM_API3_Exception $e) {
          // handle error here
          $errorMessage = $e->getMessage();
          $errorCode = $e->getErrorCode();
          $errorData = $e->getExtraParams();
          return array('error' => $errorMessage, 'error_code' => $errorCode, 'error_data' => $errorData);
        }

      // Else create the contact
      }else{
        $result = civicrm_api('Contact', 'create', $params);
        $result['update'] = 0;
        $group_params = array(
          'version' => 3,
          'sequential' => 1,
          'contact_id' => $result['id'],
          'group_id' => 81,
        );
        try{
          $group_result = civicrm_api('group_contact', 'create', $group_params);
        }
        catch (CiviCRM_API3_Exception $e) {
          // handle error here
          $errorMessage = $e->getMessage();
          $errorCode = $e->getErrorCode();
          $errorData = $e->getExtraParams();
          return array('error' => $errorMessage, 'error_code' => $errorCode, 'error_data' => $errorData);
        }
      }
      return $result;
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
    }
  }elseif($type == 'tag') {
    // Get a tag
    $tag = civicrm_api('Tag', 'get', $params);
    return $tag;
  }elseif($type == 'tag_create') {
    try{
      $tag_create = civicrm_api('Tag', 'create', $params);
      return $tag_create;
    }
    catch (CiviCRM_API3_Exception $e) {
      // handle error here
      $errorMessage = $e->getMessage();
      $errorCode = $e->getErrorCode();
      $errorData = $e->getExtraParams();
      return array('error' => $errorMessage, 'error_code' => $errorCode, 'error_data' => $errorData);
    }
  }elseif($type == 'tag_add') {
    $result = civicrm_api('EntityTag', 'create', $params);
    // print "params from scheme \n";
    // print_r($params);
    return $result;
  }elseif($type == 'tag_remove') {
    $result = civicrm_api('EntityTag', 'delete', $params);
    return $result;
  }elseif($type == 'relationship') {
    // We accept keyed sets of parameters for relationships
    // in case we want to create numerous different relationships
    // on the same contact.
    foreach($params as $key => $value) {
      $ck_params = array(
        'version' => 3,
        'sequential' => 1,
        'contact_id_a' => $value['contact_id_a'],
        'contact_id_b' => $value['contact_id_b'],
      );
      $results = civicrm_api('Relationship', 'get', $ck_params);
      if(isset($results['id']) && !empty($results['id'])) {
        $result[$key] = 'complete';
      }else{
        $result[$key] = civicrm_api('Relationship', 'create', $value);
      }
    }
    return $result;
  }else{
    $contacts = '';
  }
  $result = civicrm_api('uf_match', 'get', array('version' => 3, 'uf_id' => 10));
  return $contacts;

}

function asb_scheme_get_civi_skills($skills_info, $civi_skills) {
  global $user;
  $ufid = $user->uid;
  $civi_skills = asb_scheme_civicrm_api('skills', $ufid);
  $skills_values = array();
  foreach($civi_skills['values'] as $key => $value) {
    $skills_values[$value['value']] = $value['label'];
  }
  $diff = array_merge($skills_info['settings']['allowed_values'], $skills_values);
  return $diff;
}

/**
 *
 * Synchronize civicrm skills field with field_people_skills
 *
 */
function _asb_scheme_update_skills() {
  $field_name = 'field_people_skills';
  $instance = field_info_field($field_name);
  $skills = asb_scheme_civicrm_api('skills');
  $civi_skills = asb_scheme_get_civi_skills($instance, $skills);
  $field = array(
    'field_name' => 'field_people_skills',
    'settings' => array(
      'allowed_values' => $civi_skills,
    ),
  );
  field_update_field($field);
}

/**
 * Function to quickly get username from uid
 */
function asb_scheme_get_user_name($uid) {
  $name = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  return $name;
}

function asb_scheme_date_combo_process_alter(&$element, &$form_state, $context) {
  // TODO: Document this function
  $element['value2']['#title'] = 'Finish';
}

function asb_scheme_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
  //If a contact is being added or readded the Projects Public Group
  //FIXME what if the group is being removed? disable funding page? Yes, disable them.

  // Personal campaign pages here http://asb.local/civicrm/admin/pcp?reset=1&page_type=contribute
  // Parent contribution http://asb.mayfirst.org/civicrm/admin/contribute?reset=1

  // Group is # 81 (which is $ojectId below.

  if ( ($op == 'create' || $op == 'edit') &&
        $objectName == 'GroupContact' &&
        $objectId == 81 ) {
    // Set contact id of changed contact
    //FIXME We could possibly loop through these to deal with more than one at once.
    $contact_id = $objectRef[0];

    // Pull contact subtype
    $contact = civicrm_api("Contact",
                           "get",
                           array ('version' =>'3',
                                  'id' =>"$contact_id",
                                  'return' =>'contact_sub_type')
                          );
    // Check if contact subtype is set
    if (isset($contact['values'][$contact_id]['contact_sub_type'])) {

      // If contact is a Project subtype
      foreach ($contact['values'][$contact_id]['contact_sub_type'] as $subtype) {
        // TODO: Change to 'Scheme'
        if ($subtype == 'Scheme') {

          // Check if there's an existing PCP page
          require_once 'CRM/Core/DAO.php';
          $pcp_query = "SELECT id FROM civicrm_pcp WHERE contact_id = $contact_id";
          $pcp_id = CRM_Core_DAO::singleValueQuery( $pcp_query );
          // If there is no PCP, create it
          // FIXME what if the page exists already for this id?  This should be the
          // case where the group has been deactivated and now it's being reactivated.
          // Related to FIXME above about removing a group from Projects Public.
          if ($pcp_id == NULL) {
            // Pull the scheme entered data to create the PCP
            $project = civicrm_api("Contact",
                                   "get",
                                   array ('version' =>'3',
                                          'id' =>"$contact_id",
                                          'return' =>'display_name,custom_106,custom_107,external_identifier'
                                         )
                                  );
            // Assemble the parameters to send to add function
            $pcp_params = array(
              'title' => $project['values'][$contact_id]['display_name'],
              'intro_text' => "", //$project['values'][$contact_id]['custom_106'],
              'goal_amount' => $project['values'][$contact_id]['custom_107'] > 0 ? $project['values'][$contact_id]['custom_107'] : '100.00',
              'donate_link_text' => 'Donate Now',
              'page_text' => "If this scheme has already reached its funding goal, any additional funds will be offered to make the scheme even more successful, or support a scheme with similar goals.",
              'is_thermometer' => 1,
              'is_honor_roll' => 1,
              'is_active' => 1,
              'contact_id' => $contact_id,
              'page_id' => 11,
              'page_type' => 'contribute',
              'pcp_block_id' => 2,
              'status_id' => 2,
              'id' => NULL,
            );
            //Create PCP Page
            require_once "CRM/PCP/BAO/PCP.php";
            $project_pcp = CRM_PCP_BAO_PCP::add($pcp_params, FALSE);
          }else{
            // Pull the scheme entered data to create the PCP
            $project = civicrm_api("Contact",
                       "get",
                       array ('version' =>'3',
                         'id' =>"$contact_id",
                         'return' =>'display_name,custom_106,custom_107,external_identifier'
                             )
                                  );
            // Assemble the parameters to send to add function
            $pcp_params = array(
              'id' => $pcp_id,
              'title' => $project['values'][$contact_id]['display_name'],
              'intro_text' => "",// $project['values'][$contact_id]['custom_106'],
              'goal_amount' => $project['values'][$contact_id]['custom_107'] > 0 ? $project['values'][$contact_id]['custom_107'] : '100.00',
              'donate_link_text' => 'Donate Now',
              'page_text' => "If this scheme has already reached its funding goal, any additional funds will be offered to make the scheme even more successful, or support a scheme with similar goals.",
              'is_thermometer' => 1,
              'is_honor_roll' => 1,
              'is_active' => 1,
              'contact_id' => $contact_id,
              'page_id' => 11,
              'page_type' => 'contribute',
              'pcp_block_id' => 2,
              'status_id' => 2,
            );
            //Update an existing PCP Page
            require_once "CRM/PCP/BAO/PCP.php";
            $project_pcp = CRM_PCP_BAO_PCP::add($pcp_params, FALSE);
          }
        }
      }
    }
  }
}

/**
 * Handle social links display on user profile pages
 * using civicrm social links fields
 */
function asb_scheme_user_view($account, $view_mode, $langcode) {
  $ufid = $account->uid;
  $contact = asb_scheme_civicrm_api('contact',$ufid);
  if(!empty($contact['values'][0]['custom_98'])) {
    $account->content['social_links']['twitter'] = array(
      '#markup' => '<li class="twitter ui-button">' .l('<span>Twitter</span>', $contact['values'][0]['custom_98'], array(
                   'attributes' => array(
                     'class' => 'icon twitter',
                     'target' => '_blank',
                   ),
                   'html' => true,
                 )) .'</li>'
    );
  }else{
    $account->content['social_links']['twitter'] = array(
      '#markup' => ''
    );
  }
  if(!empty($contact['values'][0]['custom_93'])) {
    $account->content['social_links']['facebook'] = array(
      '#markup' => '<li class="facebook ui-button">' .l('<span>Facebook</span>', $contact['values'][0]['custom_93'], array(
                   'attributes' => array(
                     'class' => 'icon facebook',
                     'target' => '_blank',
                   ),
                   'html' => true,
                 )) .'</li>'
    );
  }else{
    $account->content['social_links']['facebook'] = array(
      '#markup' => ''
    );
  }

  if(!empty($contact['values'][0]['custom_99'])) {
    $account->content['social_links']['linkedin'] = array(
      '#markup' => '<li class="linkedin ui-button">' .l('<span>Linkedin</span>', $contact['values'][0]['custom_99'], array(
                   'attributes' => array(
                     'class' => 'icon linkedin',
                     'target' => '_blank',
                   ),
                   'html' => true,
                 )) .'</li>'
    );
  }else{
    $account->content['social_links']['linkedin'] = array(
      '#markup' => ''
    );
  }
}

/**
 *
 * Remove default views_infinite_scroll.js
 * because it interferes with our version of scrolling
 *
 */
function asb_scheme_js_alter(&$javascript) {
  $vis_path = drupal_get_path( 'module', 'views_infinite_scroll' );
  unset( $javascript[$vis_path.'/js/views_infinite_scroll.js']);
}

/**
 * Find and remove extra scheme leaders.
 */
function asb_scheme_remove_extra_leaders() {
  $sql = "SELECT gid, count(*) as leaders FROM og_users_roles WHERE rid = 3 GROUP BY gid HAVING leaders > 1";
  $result = db_query($sql)->fetchAll();
  $remove_role = array();
  foreach($result as $key => $value) {
    $sql = "SELECT og_users_roles.uid
             FROM og_users_roles
               LEFT JOIN {node}
               ON node.uid != og_users_roles.uid
             WHERE gid = :gid
               AND nid = :nid
               AND type = 'scheme'
               AND rid = 3";
    $result = db_query($sql, array(
                ':gid' => $value->gid,
                ':nid' => $value->gid,
              ))->fetchAll();
    foreach($result as $k => $uid) {
      if(!isset($remove_role[$value->gid])) {
        $remove_role[$value->gid] = array($uid->uid);
      }else{
        $remove_role[$value->gid][] = $uid->uid;
      }
    }
  }
  foreach($remove_role as $gid => $uids) {
    foreach($uids as $k => $uid) {
      og_role_revoke('node', $gid, $uid, 3);
      og_role_grant('node', $gid, $uid, 4);
    }
  }
}

/**
 * Implements hook_menu_block_blocks().
 */
function asb_scheme_menu_block_blocks() {
  // The array key is the block delta used by menu block.
  return array(
    'asb_util-1' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => '',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => 0,
      'sort'        => 0,
    ),
  );
}

/**
 * Implements hook_contextual_links_view_alter
 *
 * This is a super hacky way to accomplish this task.
 * And we should expect it to break at some point, but
 * for now it works to keep the contextual links from
 * spitting json out on update deletion.
 */
function asb_scheme_contextual_links_view_alter(&$element, $items) {
  if(isset($element['#links']['node-delete'])) {
    $pos = strpos($element['#links']['node-delete'], 'asb_scheme/ajax/scheme_content');
    if($pos !== false) {
      $dpoints = explode('/', $element['#links']['node-delete']['query']['destination']);
      if(is_numeric($dpoints[4])) {
        $element['#links']['node-delete']['query']['destination'] = "node/" .$dpoints[4] ."?reload";
      }
    }
  }
}
